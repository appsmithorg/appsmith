.inputGroup {
  position: relative;
  display: flex;
  align-items: center;
  gap: var(--inner-spacing-1);
  width: 100%;
}

.input {
  position: relative;
  display: flex;
  flex: 1;
  align-items: center;
  box-sizing: content-box;
  max-inline-size: 100%;
  padding-block: var(--inner-spacing-1);
  padding-inline: var(--inner-spacing-2);
  gap: var(--inner-spacing-1);
  border: 0;
  border-radius: var(--border-radius-elevation-3);
  background-color: var(--color-bg-neutral-subtle);
  box-shadow: inset 0 0 0 1px var(--color-bd-on-neutral-subtle);
  isolation: isolate;
}

.input:has(> [data-select-text]) {
  block-size: var(--body-line-height);
}

.input:is(textarea) {
  block-size: auto;
  min-block-size: var(--sizing-16);
  align-items: flex-start;
  resize: none;
  font-family: inherit;
}

.input:is(textarea)[rows="1"] {
  min-block-size: initial;
}

.input:autofill,
.input:autofill:hover,
.input:autofill:focus,
.input:autofill:active {
  font-size: initial;
  -webkit-text-fill-color: var(--color-fg);
  -webkit-box-shadow: 0 0 0 40rem var(--color-bg-neutral-subtle) inset;
}

/**
 * ----------------------------------------------------------------------------
 * SUFFIX and PREFIX
 * ----------------------------------------------------------------------------
 */
.inputGroup :is([data-input-suffix], [data-input-prefix]) button {
  border-radius: calc(
    var(--border-radius-elevation-3) - var(--inner-spacing-1)
  );
}

.inputGroup:has(> [data-input-prefix]) .input {
  padding-left: var(--sizing-8);
}

.inputGroup:has(> [data-input-prefix]) .input[data-size="large"] {
  padding-left: var(--sizing-12);
}

.inputGroup:has(> [data-input-prefix]) .input[data-size="small"] {
  padding-left: var(--sizing-6);
}

.inputGroup:has(> [data-input-prefix]) [data-input-prefix] {
  left: var(--inner-spacing-1);
  position: absolute;
}

.inputGroup:has(> [data-input-suffix]) .input {
  padding-right: var(--sizing-8);
}

.inputGroup:has(> [data-input-suffix]) .input[data-size="large"] {
  padding-right: var(--sizing-12);
}

.inputGroup:has(> [data-input-suffix]) .input[data-size="small"] {
  padding-right: var(--sizing-6);
}

.inputGroup:has(> [data-input-suffix]) [data-input-suffix] {
  right: var(--inner-spacing-1);
  position: absolute;
}

/* Note: the following calculations are done so that icon button in chat input is centered vertically */
.inputGroup:has(.input[rows="1"]) [data-input-suffix] {
  --icon-size: calc(
    var(--body-line-height) + var(--body-margin-start) + var(--body-margin-end) +
      var(--inner-spacing-3) * 2
  );
  --icon-offset: calc((var(--input-height) - var(--icon-size)) / 2);

  bottom: round(up, var(--icon-offset), 0.5px);
  right: var(--icon-offset);
}

.inputGroup:has(.input[rows="1"]) [data-input-prefix] {
  --icon-size: calc(
    var(--body-line-height) + var(--body-margin-start) + var(--body-margin-end) +
      var(--inner-spacing-3) * 2
  );
  --icon-offset: calc((var(--input-height) - var(--icon-size)) / 2);

  bottom: var(--icon-offset);
  left: var(--icon-offset);
}

.inputGroup :is([data-input-suffix], [data-input-prefix]) {
  display: flex;
  justify-content: center;
  align-items: center;
}

/**
 * ----------------------------------------------------------------------------
 * HOVERED
 * ----------------------------------------------------------------------------
 */
.inputGroup[data-hovered]
  .input:not(:is([data-focused], [data-readonly], [data-disabled])) {
  background-color: var(--color-bg-neutral-subtle-hover);
  box-shadow: inset 0 0 0 1px var(--color-bd-on-neutral-subtle-hover);
}

/**
 * ----------------------------------------------------------------------------
 * READONLY
 * ----------------------------------------------------------------------------
 */
.input[data-readonly] {
  background-color: transparent;
  box-shadow: none;
  padding-inline: 0;
}

/** Reason for doing this is because for readonly inputs, we want focus state to be wider than the component width */
.inputGroup:has(> .input[data-readonly][data-focus-visible])::before {
  content: "";
  left: calc(-0.5 * var(--inner-spacing-1));
  width: calc(100% + var(--inner-spacing-1));
  height: 100%;
  position: absolute;
  box-shadow: 0 0 0 2px var(--color-bd-focus);
  border-radius: var(--border-radius-elevation-3);
}

/**
 * ----------------------------------------------------------------------------
 * PLACEHOLDER
 * ----------------------------------------------------------------------------
 */
.input::placeholder {
  color: var(--color-fg-neutral-subtle) !important;
  opacity: 1;
}

.input:placeholder-shown {
  text-overflow: ellipsis;
}

/**
 * ----------------------------------------------------------------------------
 * DISABLED
 * ----------------------------------------------------------------------------
 */
.input[data-disabled],
.input[data-disabled] :is(input, textarea),
.input[data-disabled] label {
  cursor: not-allowed;
  box-shadow: none;
}

/**
 * ----------------------------------------------------------------------------
 * INVALID
 * ----------------------------------------------------------------------------
 */
.input[data-invalid] {
  box-shadow: 0 0 0 1px var(--color-bd-negative);
}

.inputGroup[data-hovered]
  .input[data-invalid]:not(
    :is([data-focused], [data-readonly], [data-disabled])
  ) {
  box-shadow: 0 0 0 1px var(--color-bd-negative-hover);
}

/**
 * ----------------------------------------------------------------------------
 * FOCUSSED
 * ----------------------------------------------------------------------------
 */
.input[data-focused]:not([data-readonly]) {
  background-color: transparent;
  box-shadow: 0 0 0 2px var(--color-bd-focus);
}

/**
 * ----------------------------------------------------------------------------
 * SIZE
 * ----------------------------------------------------------------------------
 */
.input[data-size="small"] {
  block-size: calc(
    var(--body-line-height) + var(--body-margin-start) + var(--body-margin-end)
  );
  padding-block: var(--inner-spacing-2);
}

.input[data-size="large"] {
  block-size: calc(
    var(--body-line-height) + var(--body-margin-start) + var(--body-margin-end)
  );
  padding-block: var(--inner-spacing-3);
  padding-inline: var(--inner-spacing-3);
}

/**
 * ----------------------------------------------------------------------------
 * SELECT BUTTON's TEXT
 * ----------------------------------------------------------------------------
 */
.input [data-select-text] {
  display: flex;
  align-items: center;
}

.input [data-select-text] [data-icon] {
  margin-inline-end: var(--inner-spacing-1);
}
