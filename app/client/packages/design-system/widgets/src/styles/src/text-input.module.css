/* NOTE: these input styles are used in text area and text input */
.text-input {
  & [data-field-input] {
    position: relative;
    display: flex;
    align-items: center;
    gap: var(--inner-spacing-1);
    border-radius: var(--border-radius-1);
    box-shadow: 0 0 0 1px var(--color-bd-neutral);
    padding-inline: var(--inner-spacing-1);
    padding-block: var(--inner-spacing-1);
    flex: 1;
  }

  & [data-field-input] :is(input, textarea) {
    border: 0;
    background-color: transparent;
    font-family: inherit;
    flex-grow: 1;
    color: var(--color-fg);
    text-overflow: ellipsis;
    width: 100%;
    padding: 0;

    &:autofill,
    &:autofill:hover,
    &:autofill:focus,
    &:autofill:active {
      font-size: initial;
    }

    &:focus {
      outline: none;
    }
  }

  /**
  * ----------------------------------------------------------------------------
  * READONLY
  *-----------------------------------------------------------------------------
  */
  & [data-readonly][data-field-input] {
    box-shadow: none;
    padding-inline: 0;
  }

  /**
  * ----------------------------------------------------------------------------
  * FOCUSSED
  *-----------------------------------------------------------------------------
  */

  /**
  * We use an absolutely positioned pseudo element because
  * we need to make the focus state in read mode a bit wider than the component width
  */
  & [data-field-input][data-focused]:before {
    content: "";
    left: 0;
    width: 100%;
    height: 100%;
    position: absolute;
    box-shadow: 0 0 0 2px var(--color-bd-focus);
    border-radius: var(--border-radius-1);
  }

  & [data-readonly][data-field-input][data-focused]:before {
    left: calc(-0.5 * var(--inner-spacing-1));
    width: calc(100% + var(--inner-spacing-1));
  }

  /**
  * ----------------------------------------------------------------------------
  * ERROR
  *-----------------------------------------------------------------------------
  */
  & [data-field-input][data-invalid] {
    box-shadow: 0 0 0 1px var(--color-bd-negative);
  }

  & [data-field-input][data-invalid][data-focused] {
    box-shadow: 0 0 0 2px var(--color-bd-negative);
  }

  /**
  * ----------------------------------------------------------------------------
  * ICON
  *-----------------------------------------------------------------------------
  */
  & [data-icon] {
    color: var(--color-fg-neutral);
  }

  /**
  * ----------------------------------------------------------------------------
  * DESCRIPTION
  *-----------------------------------------------------------------------------
  */
  & [data-field-description-text] {
    color: var(--color-fg-neutral);
  }

  /**
  * ----------------------------------------------------------------------------
  * PLACEHOLDER
  *-----------------------------------------------------------------------------
  */
  & [data-field-input] :is(input, textarea)::placeholder {
    color: var(--color-fg-neutral-subtle);
    opacity: 1;
  }

  & [data-field-input] :is(input, textarea):placeholder-shown {
    text-overflow: ellipsis;
  }

  /**
  * ----------------------------------------------------------------------------
  * ICON BUTTON ( used in password input type )
  *-----------------------------------------------------------------------------
  */
  & [data-field-input] [data-icon-button] {
    block-size: calc(100% - var(--inner-spacing-1));
  }

  /**
  * ----------------------------------------------------------------------------
  * DISABLED
  *-----------------------------------------------------------------------------
  */
  &[data-disabled],
  &[data-disabled] :is(input, textarea),
  &[data-disabled] label {
    cursor: not-allowed;
  }

  /**
  * ----------------------------------------------------------------------------
  * START ICON AND END ICON
  *-----------------------------------------------------------------------------
  */
  & [data-field-input-start-icon] div {
    width: max-content;
  }

  & [data-field-input-end-icon] div {
    width: max-content;
  }
}
