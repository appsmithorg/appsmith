import { getFormValues } from "redux-form";
import { API_EDITOR_FORM_NAME } from "ee/constants/forms";
import { getCurrentEnvironmentId } from "ee/selectors/environmentSelectors";
import get from "lodash/get";
import { useSelector } from "react-redux";
import type { Action, ApiAction, Property } from "entities/Action";
import { getDatasources } from "ee/selectors/modulesSelector";

function useGetFormActionValues() {
  const formValues = useSelector(
    getFormValues(API_EDITOR_FORM_NAME),
  ) as ApiAction;

  const actionHeaders = get(
    formValues,
    "actionConfiguration.headers",
    [],
  ) as Property[];

  const autoGeneratedHeaders: ApiAction["actionConfiguration"]["autoGeneratedHeaders"] =
    get(formValues, "actionConfiguration.autoGeneratedHeaders", []);

  const actionParams = get(
    formValues,
    "actionConfiguration.queryParameters",
    [],
  ) as Property[];

  const datasources = useSelector(getDatasources);

  let datasourceFromAction: Action["datasource"] | undefined = get(
    formValues,
    "datasource",
  );

  if (datasourceFromAction && datasourceFromAction.hasOwnProperty("id")) {
    datasourceFromAction = datasources.find(
      (d) => d.id === datasourceFromAction?.id,
    );
  }

  const currentEnvironment = useSelector(getCurrentEnvironmentId);

  const datasourceHeaders = get(
    datasourceFromAction,
    `datasourceStorages.${currentEnvironment}.datasourceConfiguration.headers`,
    [],
  ) as Property[];

  const datasourceParams = get(
    datasourceFromAction,
    `datasourceStorages.${currentEnvironment}.datasourceConfiguration.queryParameters`,
    [],
  ) as Property[];

  return {
    actionHeaders,
    autoGeneratedHeaders,
    actionParams,
    datasourceHeaders,
    datasourceParams,
  };
}

export default useGetFormActionValues;
