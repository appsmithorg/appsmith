import type { CreateApiActionDefaultsParams } from "entities/Action";
import { createDefaultApiActionPayload } from "sagas/ApiPaneSagas";

describe("tests the sagas in ApiPaneSagas", () => {
  const inputPayload: CreateApiActionDefaultsParams = {
    apiType: "graphql-plugin",
    newActionName: "newName",
  };

  it("1. Bug 27941: Tests createDefaultApiActionPayload to return prepopulated empty array for autoGeneratedHeaders", function () {
    const outputPayloadGenerator: Generator =
      createDefaultApiActionPayload(inputPayload);

    // Mocking getCurrentWorkspaceId selector
    const workspaceIdSelectorEffect = outputPayloadGenerator.next().value;
    workspaceIdSelectorEffect.payload.selector = jest.fn();
    workspaceIdSelectorEffect.payload.selector.mockReturnValue(
      "testWorkspaceId",
    );

    // Mock getPluginIdOfPackageName selector
    const pluginIdSelectorEffect = outputPayloadGenerator.next().value;
    pluginIdSelectorEffect.payload.selector = jest.fn();
    pluginIdSelectorEffect.payload.selector.mockReturnValue("pluginId");

    // Get actionconfig value now
    const outputPayload = outputPayloadGenerator.next().value;
    expect(outputPayload?.actionConfiguration.autoGeneratedHeaders).toEqual([]);
  });

  it("2. Bug 27941: Tests createDefaultApiActionPayload to return prepopulated empty array for autoGeneratedHeaders", function () {
    inputPayload.apiType = "restapi-plugin";
    const outputPayloadGenerator: Generator =
      createDefaultApiActionPayload(inputPayload);

    // Mocking getCurrentWorkspaceId selector
    const workspaceIdSelectorEffect = outputPayloadGenerator.next().value;
    workspaceIdSelectorEffect.payload.selector = jest.fn();
    workspaceIdSelectorEffect.payload.selector.mockReturnValue(
      "testWorkspaceId",
    );

    // Mock getPluginIdOfPackageName selector
    const pluginIdSelectorEffect = outputPayloadGenerator.next().value;
    pluginIdSelectorEffect.payload.selector = jest.fn();
    pluginIdSelectorEffect.payload.selector.mockReturnValue("pluginId");

    // Get actionconfig value now
    const outputPayload = outputPayloadGenerator.next().value;
    expect(outputPayload?.actionConfiguration.autoGeneratedHeaders).toEqual([]);
  });
});
