{
  "$schema": "http://json.schemastore.org/eslintrc",
  "root": true,
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/strict-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "ignorePatterns": [
    "jest.config.js",
    "jest.setup.ts",
    "rollup.config.js",
    ".eslintrc.js"
  ],
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "prettier",
    "sort-destructure-keys",
    "cypress",
    "testing-library",
    "jest",
    "@appsmith",
    "react-perf"
  ],
  "parserOptions": {
    "ecmaVersion": 2024,
    "sourceType": "module",
    "project": true,
    "tsconfigRootDir": ".",
    "ecmaFeatures": {
      "jsx": true
    }
  },
  "rules": {
    "@typescript-eslint/consistent-type-assertions": "warn",
    "@typescript-eslint/prefer-function-type": "warn",
    "@typescript-eslint/no-empty-interface": "warn",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/prefer-string-starts-ends-with": "warn",
    "@typescript-eslint/prefer-reduce-type-parameter": "warn",
    "@typescript-eslint/prefer-for-of": "warn",
    "@typescript-eslint/no-unnecessary-type-arguments": "warn",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "warn",
    "@typescript-eslint/dot-notation": "warn",
    "@typescript-eslint/no-unnecessary-type-assertion": "warn",
    "@typescript-eslint/prefer-includes": "warn",
    "@typescript-eslint/no-inferrable-types": "warn",
    "@typescript-eslint/no-throw-literal": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/array-type": "warn",
    "@typescript-eslint/consistent-generic-constructors": "warn",
    "@typescript-eslint/consistent-indexed-object-style": "warn",
    "@typescript-eslint/no-confusing-void-expression": "warn",
    "@typescript-eslint/non-nullable-type-assertion-style": "warn",
    "@typescript-eslint/no-useless-template-literals": "warn",
    "@typescript-eslint/no-unnecessary-condition": "warn",
    "@typescript-eslint/no-implied-eval": "warn",
    "@typescript-eslint/restrict-plus-operands": "warn",
    "@typescript-eslint/no-base-to-string": "warn",
    "@typescript-eslint/no-unused-vars": "warn",
    "@typescript-eslint/no-for-in-array": "warn",
    "@typescript-eslint/no-extraneous-class": "warn",
    "@typescript-eslint/no-redundant-type-constituents": "warn",
    "@typescript-eslint/restrict-template-expressions": "warn",
    "@typescript-eslint/no-invalid-void-type": "warn",
    "@typescript-eslint/no-useless-constructor": "warn",
    "@typescript-eslint/no-misused-promises": "warn",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/require-await": "warn",
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/await-thenable": "warn",
    "@typescript-eslint/no-dynamic-delete": "warn",
    "@typescript-eslint/no-unsafe-enum-comparison": "warn",
    "@typescript-eslint/no-use-before-define": "warn",
    "@typescript-eslint/unbound-method": "warn",
    "@typescript-eslint/no-unsafe-argument": "warn",
    "@typescript-eslint/no-unsafe-assignment": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-return": "warn",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "fixStyle": "separate-type-imports"
      }
    ],
    "@typescript-eslint/no-import-type-side-effects": "error",
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/no-restricted-imports": [
      "error",
      {
        "patterns": [
          {
            "group": [
              "@blueprintjs/core/lib/esnext/*"
            ],
            "message": "Reason: @blueprintjs/core has both lib/esnext and lib/esm directories which export the same components. To avoid duplicating components in the bundle, please import only from the lib/esm directory."
          },
          {
            "group": [
              "*.svg"
            ],
            "importNames": [
              "ReactComponent"
            ],
            "message": "Reason: Please don't import SVG icons statically. (They won't always be needed, but they *will* always be present in the bundle and will increase the bundle size.) Instead, please either import them as SVG paths (e.g. import starIconUrl from './star.svg'), or use the importSvg wrapper from @appsmith/ads-old (e.g. const StarIcon = importSvg(() => import('./star.svg')))."
          },
          {
            "group": [
              "remixicon-react/*"
            ],
            "message": "Reason: Please don't import Remix icons statically. (They won't always be needed, but they *will* always be present in the bundle and will increase the bundle size.) Instead, please use the importRemixIcon wrapper from @appsmith/ads-old (e.g. const StarIcon = importRemixIcon(() => import('remixicon-react/Star')))."
          }
        ]
      }
    ],
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": [
          "if",
          "for",
          "while"
        ]
      },
      {
        "blankLine": "always",
        "prev": [
          "if",
          "for",
          "while"
        ],
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": [
          "const",
          "let"
        ],
        "next": "*"
      },
      {
        "blankLine": "any",
        "prev": [
          "const",
          "let"
        ],
        "next": [
          "const",
          "let"
        ]
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "function"
      },
      {
        "blankLine": "always",
        "prev": "function",
        "next": "*"
      }
    ],
    "testing-library/consistent-data-testid": [
      "warn",
      {
        "testIdPattern": "^t--[a-zA-Z0-9_.-]*$",
        "testIdAttribute": [
          "data-testid"
        ]
      }
    ],
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/strict-boolean-expressions": "error",
    "jest/no-focused-tests": "error",
    "jest/no-disabled-tests": "error",
    "react/jsx-boolean-value": "error",
    "react/self-closing-comp": "error",
    "react/jsx-sort-props": "error",
    "react/jsx-fragments": "error",
    "react/jsx-no-useless-fragment": "error",
    "sort-destructure-keys/sort-destructure-keys": [
      "error",
      {
        "caseSensitive": false
      }
    ],
    "no-console": "error",
    "no-debugger": "error",
    "react-perf/jsx-no-new-array-as-prop": "warn",
    "react-perf/jsx-no-new-function-as-prop": "warn",
    "react-perf/jsx-no-jsx-as-prop": "warn",
    "react-perf/jsx-no-new-object-as-prop": [
      "warn",
      {
        "nativeAllowList": "all"
      }
    ]
  },
  "settings": {
    "import/resolver": {
      "babel-module": {}
    },
    "react": {
      "pragma": "React",
      "version": "detect"
    }
  },
  "env": {
    "browser": true,
    "node": true,
    "cypress/globals": true,
    "worker": true
  }
}