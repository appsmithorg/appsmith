import parser from 'fast-xml-parser';
import moment from 'moment-timezone';
import _, { VERSION as lodashVersion } from 'lodash';
import forge from 'node-forge';

export const JAVASCRIPT_KEYWORDS = {
  Array: 'Array',
  await: 'await',
  Boolean: 'Boolean',
  break: 'break',
  case: 'case',
  catch: 'catch',
  class: 'class',
  const: 'const',
  continue: 'continue',
  Date: 'Date',
  debugger: 'debugger',
  default: 'default',
  delete: 'delete',
  do: 'do',
  else: 'else',
  enum: 'enum',
  eval: 'eval',
  export: 'export',
  extends: 'extends',
  false: 'false',
  finally: 'finally',
  for: 'for',
  function: 'function',
  Function: 'Function',
  hasOwnProperty: 'hasOwnProperty',
  if: 'if',
  implements: 'implements',
  import: 'import',
  in: 'in',
  Infinity: 'Infinity',
  instanceof: 'instanceof',
  interface: 'interface',
  isFinite: 'isFinite',
  isNaN: 'isNaN',
  isPrototypeOf: 'isPrototypeOf',
  JSON: 'JSON',
  length: 'length',
  let: 'let',
  Math: 'Math',
  name: 'name',
  NaN: 'NaN',
  new: 'new',
  null: 'null',
  Number: 'Number',
  Object: 'Object',
  package: 'package',
  private: 'private',
  protected: 'protected',
  public: 'public',
  return: 'return',
  static: 'static',
  String: 'String',
  super: 'super',
  switch: 'switch',
  this: 'this',
  throw: 'throw',
  toString: 'toString',
  true: 'true',
  try: 'try',
  typeof: 'typeof',
  undefined: 'undefined',
  valueOf: 'valueOf',
  var: 'var',
  void: 'void',
  while: 'while',
  with: 'with',
  yield: 'yield',
};

/**
 *  Global scope Identifiers in the worker context, accessible via the "self" keyword.
 * These identifiers are already present in the worker context and shouldn't represent any valid identifier within Appsmith, as no entity should have
 * same name as them to prevent unexpected behaviour during evaluation(which happens on the worker thread) in the worker.
 * Check if an identifier (or window object/property) is available in the worker context here => https://worker-playground.glitch.me/
 */
export const DEDICATED_WORKER_GLOBAL_SCOPE_IDENTIFIERS = {
  Infinity: 'Infinity',
  AbortController: 'AbortController',
  AbortSignal: 'AbortSignal',
  AggregateError: 'AggregateError',
  Array: 'Array',
  ArrayBuffer: 'ArrayBuffer',
  Atomics: 'Atomics',
  AudioData: 'AudioData',
  AudioDecoder: 'AudioDecoder',
  AudioEncoder: 'AudioEncoder',
  BackgroundFetchManager: 'BackgroundFetchManager',
  BackgroundFetchRecord: 'BackgroundFetchRecord',
  BackgroundFetchRegistration: 'BackgroundFetchRegistration',
  BarcodeDetector: 'BarcodeDetector',
  BigInt: 'BigInt',
  BigInt64Array: 'BigInt64Array',
  BigUint64Array: 'BigUint64Array',
  Blob: 'Blob',
  Boolean: 'Boolean',
  BroadcastChannel: 'BroadcastChannel',
  ByteLengthQueuingStrategy: 'ByteLengthQueuingStrategy',
  CSSSkewX: 'CSSSkewX',
  CSSSkewY: 'CSSSkewY',
  Cache: 'Cache',
  CacheStorage: 'CacheStorage',
  cancelAnimationFrame: 'cancelAnimationFrame',
  CanvasFilter: 'CanvasFilter',
  CanvasGradient: 'CanvasGradient',
  CanvasPattern: 'CanvasPattern',
  clearInterval: 'clearInterval',
  close: 'close',
  CloseEvent: 'CloseEvent',
  CompressionStream: 'CompressionStream',
  console: 'console',
  CountQueuingStrategy: 'CountQueuingStrategy',
  CropTarget: 'CropTarget',
  Crypto: 'Crypto',
  CryptoKey: 'CryptoKey',
  CustomEvent: 'CustomEvent',
  decodeURI: 'decodeURI',
  decodeURIComponent: 'decodeURIComponent',
  DOMException: 'DOMException',
  DOMMatrix: 'DOMMatrix',
  DOMMatrixReadOnly: 'DOMMatrixReadOnly',
  DOMPoint: 'DOMPoint',
  DOMPointReadOnly: 'DOMPointReadOnly',
  DOMQuad: 'DOMQuad',
  DOMRect: 'DOMRect',
  DOMRectReadOnly: 'DOMRectReadOnly',
  DOMStringList: 'DOMStringList',
  DataView: 'DataView',
  Date: 'Date',
  DecompressionStream: 'DecompressionStream',
  DedicatedWorkerGlobalScope: 'DedicatedWorkerGlobalScope',
  encodeURI: 'encodeURI',
  encodeURIComponent: 'encodeURIComponent',
  EncodedAudioChunk: 'EncodedAudioChunk',
  EncodedVideoChunk: 'EncodedVideoChunk',
  Error: 'Error',
  ErrorEvent: 'ErrorEvent',
  escape: 'escape',
  eval: 'eval',
  EvalError: 'EvalError',
  Event: 'Event',
  EventSource: 'EventSource',
  EventTarget: 'EventTarget',
  fetch: 'fetch',
  File: 'File',
  FileList: 'FileList',
  FileReader: 'FileReader',
  FileReaderSync: 'FileReaderSync',
  FileSystemDirectoryHandle: 'FileSystemDirectoryHandle',
  FileSystemFileHandle: 'FileSystemFileHandle',
  FileSystemHandle: 'FileSystemHandle',
  FileSystemSyncAccessHandle: 'FileSystemSyncAccessHandle',
  FileSystemWritableFileStream: 'FileSystemWritableFileStream',
  FinalizationRegistry: 'FinalizationRegistry',
  Float32Array: 'Float32Array',
  Float64Array: 'Float64Array',
  FontFace: 'FontFace',
  FormData: 'FormData',
  Function: 'Function',
  globalThis: 'globalThis',
  Headers: 'Headers',
  IDBCursor: 'IDBCursor',
  IDBCursorWithValue: 'IDBCursorWithValue',
  IDBDatabase: 'IDBDatabase',
  IDBFactory: 'IDBFactory',
  IDBIndex: 'IDBIndex',
  IDBKeyRange: 'IDBKeyRange',
  IDBObjectStore: 'IDBObjectStore',
  IDBOpenDBRequest: 'IDBOpenDBRequest',
  IDBRequest: 'IDBRequest',
  IDBTransaction: 'IDBTransaction',
  IDBVersionChangeEvent: 'IDBVersionChangeEvent',
  IdleDetector: 'IdleDetector',
  ImageBitmap: 'ImageBitmap',
  ImageBitmapRenderingContext: 'ImageBitmapRenderingContext',
  ImageData: 'ImageData',
  ImageDecoder: 'ImageDecoder',
  ImageTrack: 'ImageTrack',
  ImageTrackList: 'ImageTrackList',
  importScripts: 'importScripts',
  Int8Array: 'Int8Array',
  Int16Array: 'Int16Array',
  Int32Array: 'Int32Array',
  Intl: 'Intl',
  isFinite: 'isFinite',
  isNaN: 'isNaN',
  JSON: 'JSON',
  Lock: 'Lock',
  LockManager: 'LockManager',
  Map: 'Map',
  Math: 'Math',
  MediaCapabilities: 'MediaCapabilities',
  MessageChannel: 'MessageChannel',
  MessageEvent: 'MessageEvent',
  MessagePort: 'MessagePort',
  NaN: 'NaN',
  name: 'name',
  NavigationPreloadManager: 'NavigationPreloadManager',
  NavigatorUAData: 'NavigatorUAData',
  NetworkInformation: 'NetworkInformation',
  Notification: 'Notification',
  Number: 'Number',
  onmessage: 'onmessage',
  onmessageerror: 'onmessageerror',
  Object: 'Object',
  OffscreenCanvas: 'OffscreenCanvas',
  OffscreenCanvasRenderingContext2D: 'OffscreenCanvasRenderingContext2D',
  parseFloat: 'parseFloat',
  parseInt: 'parseInt',
  Path2D: 'Path2D',
  PaymentInstruments: 'PaymentInstruments',
  Performanc: 'Performanc',
  PerformanceEntry: 'PerformanceEntry',
  PerformanceMark: 'PerformanceMark',
  PerformanceMeasure: 'PerformanceMeasure',
  PerformanceObserver: 'PerformanceObserver',
  PerformanceObserverEntryList: 'PerformanceObserverEntryList',
  PerformanceResourceTiming: 'PerformanceResourceTiming',
  PerformanceServerTiming: 'PerformanceServerTiming',
  PeriodicSyncManager: 'PeriodicSyncManager',
  PermissionStatus: 'PermissionStatus',
  Permissions: 'Permissions',
  postMessage: 'postMessage',
  ProgressEvent: 'ProgressEvent',
  Promise: 'Promise',
  PromiseRejectionEvent: 'PromiseRejectionEvent',
  Proxy: 'Proxy',
  PushManager: 'PushManager',
  PushSubscription: 'PushSubscription',
  PushSubscriptionOptions: 'PushSubscriptionOptions',
  RTCEncodedAudioFrame: 'RTCEncodedAudioFrame',
  RTCEncodedVideoFrame: 'RTCEncodedVideoFrame',
  RangeError: 'RangeError',
  ReadableByteStreamController: 'ReadableByteStreamController',
  ReadableStream: 'ReadableStream',
  ReadableStreamBYOBReader: 'ReadableStreamBYOBReader',
  ReadableStreamBYOBRequest: 'ReadableStreamBYOBRequest',
  ReadableStreamDefaultController: 'ReadableStreamDefaultController',
  ReadableStreamDefaultReader: 'ReadableStreamDefaultReader',
  ReferenceError: 'ReferenceError',
  Reflect: 'Reflect',
  RegExp: 'RegExp',
  ReportingObserver: 'ReportingObserver',
  Request: 'Request',
  requestAnimationFrame: 'requestAnimationFrame',
  Response: 'Response',
  Scheduler: 'Scheduler',
  SecurityPolicyViolationEvent: 'SecurityPolicyViolationEvent',
  Serial: 'Serial',
  SerialPort: 'SerialPort',
  ServiceWorkerRegistration: 'ServiceWorkerRegistration',
  Set: 'Set',
  setInterval: 'setInterval',
  setTimeout: 'setTimeout',
  StorageManager: 'StorageManager',
  String: 'String',
  SubtleCrypto: 'SubtleCrypto',
  Symbol: 'Symbol',
  SyncManager: 'SyncManager',
  SyntaxError: 'SyntaxError',
  TaskController: 'TaskController',
  TaskPriorityChangeEvent: 'TaskPriorityChangeEvent',
  TaskSignal: 'TaskSignal',
  TextDecoder: 'TextDecoder',
  TextDecoderStream: 'TextDecoderStream',
  TextEncoder: 'TextEncoder',
  TextEncoderStream: 'TextEncoderStream',
  TextMetrics: 'TextMetrics',
  TransformStream: 'TransformStream',
  TransformStreamDefaultController: 'TransformStreamDefaultController',
  TrustedHTML: 'TrustedHTML',
  TrustedScript: 'TrustedScript',
  TrustedScriptURL: 'TrustedScriptURL',
  TrustedTypePolicy: 'TrustedTypePolicy',
  TrustedTypePolicyFactory: 'TrustedTypePolicyFactory',
  TypeError: 'TypeError',
  undefined: 'undefined',
  unescape: 'unescape',
  URIError: 'URIError',
  URL: 'URL',
  URLPattern: 'URLPattern',
  URLSearchParams: 'URLSearchParams',
  USB: 'USB',
  USBAlternateInterface: 'USBAlternateInterface',
  USBConfiguration: 'USBConfiguration',
  USBConnectionEvent: 'USBConnectionEvent',
  USBDevice: 'USBDevice',
  USBEndpoint: 'USBEndpoint',
  USBInTransferResult: 'USBInTransferResult',
  USBInterface: 'USBInterface',
  USBIsochronousInTransferPacket: 'USBIsochronousInTransferPacket',
  USBIsochronousInTransferResult: 'USBIsochronousInTransferResult',
  USBIsochronousOutTransferPacket: 'USBIsochronousOutTransferPacket',
  USBIsochronousOutTransferResult: 'USBIsochronousOutTransferResult',
  USBOutTransferResult: 'USBOutTransferResult',
  Uint8Array: 'Uint8Array',
  Uint8ClampedArray: 'Uint8ClampedArray',
  Uint16Array: 'Uint16Array',
  Uint32Array: 'Uint32Array',
  UserActivation: 'UserActivation',
  VideoColorSpace: 'VideoColorSpace',
  VideoDecoder: 'VideoDecoder',
  VideoEncoder: 'VideoEncoder',
  VideoFrame: 'VideoFrame',
  WeakMap: 'WeakMap',
  WeakRef: 'WeakRef',
  WeakSet: 'WeakSet',
  WebAssembly: 'WebAssembly',
  WebGL2RenderingContext: 'WebGL2RenderingContext',
  WebGLActiveInfo: 'WebGLActiveInfo',
  WebGLBuffer: 'WebGLBuffer',
  WebGLFramebuffer: 'WebGLFramebuffer',
  WebGLProgram: 'WebGLProgram',
  WebGLQuery: 'WebGLQuery',
  WebGLRenderbuffer: 'WebGLRenderbuffer',
  WebGLRenderingContext: 'WebGLRenderingContext',
  WebGLSampler: 'WebGLSampler',
  WebGLShader: 'WebGLShader',
  WebGLShaderPrecisionFormat: 'WebGLShaderPrecisionFormat',
  WebGLSync: 'WebGLSync',
  WebGLTexture: 'WebGLTexture',
  WebGLTransformFeedback: 'WebGLTransformFeedback',
  WebGLUniformLocation: 'WebGLUniformLocation',
  WebGLVertexArrayObject: 'WebGLVertexArrayObject',
  webkitRequestFileSystem: 'webkitRequestFileSystem',
  webkitRequestFileSystemSync: 'webkitRequestFileSystemSync',
  webkitResolveLocalFileSystemSyncURL: 'webkitResolveLocalFileSystemSyncURL',
  webkitResolveLocalFileSystemURL: 'webkitResolveLocalFileSystemURL',
  WebSocket: 'WebSocket',
  WebTransport: 'WebTransport',
  WebTransportBidirectionalStream: 'WebTransportBidirectionalStream',
  WebTransportDatagramDuplexStream: 'WebTransportDatagramDuplexStream',
  WebTransportError: 'WebTransportError',
  Worker: 'Worker',
  WorkerGlobalScope: 'WorkerGlobalScope',
  WorkerLocation: 'WorkerLocation',
  WorkerNavigator: 'WorkerNavigator',
  WritableStream: 'WritableStream',
  WritableStreamDefaultController: 'WritableStreamDefaultController',
  WritableStreamDefaultWriter: 'WritableStreamDefaultWriter',
  XMLHttpRequest: 'XMLHttpRequest',
  XMLHttpRequestEventTarget: 'XMLHttpRequestEventTarget',
  XMLHttpRequestUpload: 'XMLHttpRequestUpload',
};

export type ExtraLibrary = {
  version: string;
  docsURL: string;
  displayName: string;
  accessor: string;
  lib: any;
};

export const extraLibraries: ExtraLibrary[] = [
  {
    accessor: '_',
    lib: _,
    version: lodashVersion,
    docsURL: `https://lodash.com/docs/${lodashVersion}`,
    displayName: 'lodash',
  },
  {
    accessor: 'moment',
    lib: moment,
    version: moment.version,
    docsURL: `https://momentjs.com/docs/`,
    displayName: 'moment',
  },
  {
    accessor: 'xmlParser',
    lib: parser,
    version: '3.17.5',
    docsURL: 'https://github.com/NaturalIntelligence/fast-xml-parser',
    displayName: 'xmlParser',
  },
  {
    accessor: 'forge',
    // We are removing some functionalities of node-forge because they wont
    // work in the worker thread
    lib: _.omit(forge, ['tls', 'http', 'xhr', 'socket', 'task']),
    version: '1.3.0',
    docsURL: 'https://github.com/digitalbazaar/forge',
    displayName: 'forge',
  },
];

export const GLOBAL_FUNCTIONS = {
  '!name': 'DATA_TREE.APPSMITH.FUNCTIONS',
  navigateTo: {
    '!doc': 'Action to navigate the user to another page or url',
    '!type':
      'fn(pageNameOrUrl: string, params: {}, target?: string) -> +Promise[:t=[!0.<i>.:t]]',
  },
  showAlert: {
    '!doc': 'Show a temporary notification style message to the user',
    '!type': 'fn(message: string, style: string) -> +Promise[:t=[!0.<i>.:t]]',
  },
  showModal: {
    '!doc': 'Open a modal',
    '!type': 'fn(modalName: string) -> +Promise[:t=[!0.<i>.:t]]',
  },
  closeModal: {
    '!doc': 'Close a modal',
    '!type': 'fn(modalName: string) -> +Promise[:t=[!0.<i>.:t]]',
  },
  storeValue: {
    '!doc': 'Store key value data locally',
    '!type': 'fn(key: string, value: any) -> +Promise[:t=[!0.<i>.:t]]',
  },
  download: {
    '!doc': 'Download anything as a file',
    '!type':
      'fn(data: any, fileName: string, fileType?: string) -> +Promise[:t=[!0.<i>.:t]]',
  },
  copyToClipboard: {
    '!doc': 'Copy text to clipboard',
    '!type': 'fn(data: string, options: object) -> +Promise[:t=[!0.<i>.:t]]',
  },
  resetWidget: {
    '!doc': 'Reset widget values',
    '!type':
      'fn(widgetName: string, resetChildren: boolean) -> +Promise[:t=[!0.<i>.:t]]',
  },
  setInterval: {
    '!doc': 'Execute triggers at a given interval',
    '!type': 'fn(callback: fn, interval: number, id?: string) -> void',
  },
  clearInterval: {
    '!doc': 'Stop executing a setInterval with id',
    '!type': 'fn(id: string) -> void',
  },
};

/**
 * creates dynamic list of constants based on
 * current list of extra libraries i.e lodash("_"), moment etc
 * to be used in widget and entity name validations
 */
export const extraLibrariesNames = extraLibraries.map(
  (library) => library.accessor
);
