export const ECMA_VERSION = 11;

/* Indicates the mode the code should be parsed in. 
This influences global strict mode and parsing of import and export declarations.
*/
export enum SourceType {
  script = 'script',
  module = 'module',
}

// Each node has an attached type property which further defines
// what all properties can the node have.
// We will just define the ones we are working with
export enum NodeTypes {
  Identifier = 'Identifier',
  AssignmentPattern = 'AssignmentPattern',
  Literal = 'Literal',
  Property = 'Property',
  // Declaration - https://github.com/estree/estree/blob/master/es5.md#declarations
  FunctionDeclaration = 'FunctionDeclaration',
  ExportDefaultDeclaration = 'ExportDefaultDeclaration',
  VariableDeclarator = 'VariableDeclarator',
  // Expression - https://github.com/estree/estree/blob/master/es5.md#expressions
  MemberExpression = 'MemberExpression',
  FunctionExpression = 'FunctionExpression',
  ArrowFunctionExpression = 'ArrowFunctionExpression',
  ObjectExpression = 'ObjectExpression',
  ArrayExpression = 'ArrayExpression',
  ThisExpression = 'ThisExpression',
}

export const JAVASCRIPT_KEYWORDS = {
  Array: 'Array',
  await: 'await',
  Boolean: 'Boolean',
  break: 'break',
  case: 'case',
  catch: 'catch',
  class: 'class',
  const: 'const',
  continue: 'continue',
  Date: 'Date',
  debugger: 'debugger',
  default: 'default',
  delete: 'delete',
  do: 'do',
  else: 'else',
  enum: 'enum',
  eval: 'eval',
  export: 'export',
  extends: 'extends',
  false: 'false',
  finally: 'finally',
  for: 'for',
  function: 'function',
  Function: 'Function',
  hasOwnProperty: 'hasOwnProperty',
  if: 'if',
  implements: 'implements',
  import: 'import',
  in: 'in',
  Infinity: 'Infinity',
  instanceof: 'instanceof',
  interface: 'interface',
  isFinite: 'isFinite',
  isNaN: 'isNaN',
  isPrototypeOf: 'isPrototypeOf',
  JSON: 'JSON',
  length: 'length',
  let: 'let',
  Math: 'Math',
  name: 'name',
  NaN: 'NaN',
  new: 'new',
  null: 'null',
  Number: 'Number',
  Object: 'Object',
  package: 'package',
  private: 'private',
  protected: 'protected',
  public: 'public',
  return: 'return',
  static: 'static',
  String: 'String',
  super: 'super',
  switch: 'switch',
  this: 'this',
  throw: 'throw',
  toString: 'toString',
  true: 'true',
  try: 'try',
  typeof: 'typeof',
  undefined: 'undefined',
  valueOf: 'valueOf',
  var: 'var',
  void: 'void',
  while: 'while',
  with: 'with',
  yield: 'yield',
};

export const WINDOW_OBJECT_PROPERTIES = {
  closed: 'closed',
  console: 'console',
  defaultStatus: 'defaultStatus',
  document: 'document',
  frameElement: 'frameElement',
  frames: 'frames',
  history: 'history',
  innerHeight: 'innerHeight',
  innerWidth: 'innerWidth',
  length: 'length',
  localStorage: 'localStorage',
  location: 'location',
  name: 'name',
  navigator: 'navigator',
  opener: 'opener',
  outerHeight: 'outerHeight',
  outerWidth: 'outerWidth',
  pageXOffset: 'pageXOffset',
  pageYOffset: 'pageYOffset',
  parent: 'parent',
  screen: 'screen',
  screenLeft: 'screenLeft',
  screenTop: 'screenTop',
  screenY: 'screenY',
  scrollX: 'scrollX',
  scrollY: 'scrollY',
  self: 'self',
  status: 'status',
  top: 'top',
};

export const WINDOW_OBJECT_METHODS = {
  alert: 'alert',
  atob: 'atob',
  blur: 'blur',
  btoa: 'btoa',
  clearInterval: 'clearInterval',
  clearTimeout: 'clearTimeout',
  close: 'close',
  confirm: 'confirm',
  focus: 'focus',
  getComputedStyle: 'getComputedStyle',
  getSelection: 'getSelection',
  matchMedia: 'matchMedia',
  moveBy: 'moveBy',
  moveTo: 'moveTo',
  open: 'open',
  print: 'print',
  prompt: 'prompt',
  requestAnimationFrame: 'requestAnimationFrame',
  resizeBy: 'resizeBy',
  resizeTo: 'resizeTo',
  scroll: 'scroll',
  scrollBy: 'scrollBy',
  scrollTo: 'scrollBy',
  setInterval: 'setInterval',
  setTimeout: 'setTimeout',
  stop: 'stop',
};

export const GLOBAL_SCOPE_OBJECTS = {
  Error: 'Error',
  Promise: 'Promise',
  ReferenceError: 'ReferenceError',
  RegExp: 'RegExp',
  SyntaxError: 'SyntaxError',
  URIError: 'URIError',
  EvalError: 'EvalError',
  RangeError: 'RangeError',
  TypeError: 'TypeError',
  parseInt: 'parseInt',
  parseFloat: 'parseFloat',
  encodeURI: 'encodeURI',
  encodeURIComponent: 'encodeURIComponent',
  decodeURI: 'decodeURI',
  decodeURIComponent: 'decodeURIComponent',
  ArrayBuffer: 'ArrayBuffer',
  DataView: 'DataView',
  Float32Array: 'Float32Array',
  Float64Array: 'Float64Array',
  Int16Array: 'Int16Array',
  Int32Array: 'Int32Array',
  Int8Array: 'Int8Array',
  Map: 'Map',
  Proxy: 'Proxy',
  Reflect: 'Reflect',
  Set: 'Set',
  Symbol: 'Symbol',
  Uint16Array: 'TypedArray',
  Uint32Array: 'TypedArray',
  Uint8Array: 'TypedArray',
  Uint8ClampedArray: 'TypedArray',
  WeakMap: 'WeakMap',
  WeakSet: 'WeakSet',
};
