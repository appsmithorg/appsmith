package com.external.plugins;

import com.appsmith.external.exceptions.pluginExceptions.AppsmithPluginError;
import com.appsmith.external.exceptions.pluginExceptions.AppsmithPluginException;
import com.appsmith.external.helpers.restApiUtils.connections.APIConnection;
import com.appsmith.external.helpers.restApiUtils.helpers.RequestCaptureFilter;
import com.appsmith.external.models.ActionConfiguration;
import com.appsmith.external.models.ActionExecutionRequest;
import com.appsmith.external.models.ActionExecutionResult;
import com.appsmith.external.models.DatasourceConfiguration;
import com.appsmith.external.models.TriggerRequestDTO;
import com.appsmith.external.models.TriggerResultDTO;
import com.appsmith.external.plugins.BasePlugin;
import com.appsmith.external.plugins.BaseRestApiPluginExecutor;
import com.appsmith.external.services.SharedConfig;
import com.external.plugins.pluginActions.commands.WorkflowCommand;
import com.external.plugins.pluginActions.strategies.WorkflowCommandStrategy;
import com.external.plugins.pluginActions.strategies.WorkflowTriggerStrategy;
import com.external.plugins.pluginActions.trigger.WorkflowTrigger;
import com.google.gson.Gson;
import lombok.extern.slf4j.Slf4j;
import org.pf4j.Extension;
import org.pf4j.PluginWrapper;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static com.external.plugins.constants.FieldNames.BODY;

public class WorkflowPlugin extends BasePlugin {

    public WorkflowPlugin(PluginWrapper wrapper) {
        super(wrapper);
    }

    @Slf4j
    @Extension
    public static class WorkflowPluginExecutor extends BaseRestApiPluginExecutor {

        private static final Gson gson = new Gson();

        protected WorkflowPluginExecutor(SharedConfig sharedConfig) {
            super(sharedConfig);
        }

        @Override
        public Mono<ActionExecutionResult> execute(
                APIConnection connection,
                DatasourceConfiguration datasourceConfiguration,
                ActionConfiguration actionConfiguration) {
            // Get prompt from action configuration
            List<Map.Entry<String, String>> parameters = new ArrayList<>();

            // Filter out any empty headers
            headerUtils.removeEmptyHeaders(actionConfiguration);
            headerUtils.setHeaderFromAutoGeneratedHeaders(actionConfiguration);
            return executeCommon(actionConfiguration, parameters);
        }

        private Mono<ActionExecutionResult> executeCommon(
                ActionConfiguration actionConfiguration, List<Map.Entry<String, String>> insertedParam) {

            // Initializing object for error condition
            ActionExecutionResult errorResult = new ActionExecutionResult();
            initUtils.initializeResponseWithError(errorResult);

            try {
                WorkflowCommand workflowCommand = WorkflowCommandStrategy.getWorkflowCommand(actionConfiguration);
                URI executionUri = workflowCommand.getExecutionUri();
                ActionExecutionRequest actionExecutionRequest = RequestCaptureFilter.populateRequestFields(
                        actionConfiguration, executionUri, insertedParam, objectMapper);
                Mono<ResponseEntity<String>> responseEntityMono = workflowCommand.getResponse();

                return responseEntityMono
                        .map(responseEntity -> {
                            HttpStatusCode statusCode = responseEntity.getStatusCode();
                            ActionExecutionResult actionExecutionResult = new ActionExecutionResult();
                            actionExecutionResult.setRequest(actionExecutionRequest);
                            actionExecutionResult.setStatusCode(statusCode.toString());

                            Object body;
                            try {
                                body = objectMapper.readValue(responseEntity.getBody(), Object.class);
                                actionExecutionResult.setBody(body);

                            } catch (IOException ex) {
                                actionExecutionResult.setIsExecutionSuccess(false);
                                actionExecutionResult.setErrorInfo(new AppsmithPluginException(
                                        AppsmithPluginError.PLUGIN_JSON_PARSE_ERROR, BODY, ex.getMessage()));
                                return actionExecutionResult;
                            }

                            actionExecutionResult.setIsExecutionSuccess(statusCode.is2xxSuccessful());
                            return actionExecutionResult;
                        })
                        .onErrorResume(error -> populateErrorResultWithDetails(errorResult, error));
            } catch (Throwable error) {
                return populateErrorResultWithDetails(errorResult, error);
            }
        }

        private Mono<ActionExecutionResult> populateErrorResultWithDetails(
                ActionExecutionResult errorResult, Throwable error) {
            errorResult.setIsExecutionSuccess(false);
            log.debug(
                    "An error has occurred while trying to run the open API query command with error {}",
                    error.getStackTrace());
            if (!(error instanceof AppsmithPluginException)) {
                error = new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, error.getMessage(), error);
            }
            errorResult.setErrorInfo(error);
            return Mono.just(errorResult);
        }

        @Override
        public Mono<TriggerResultDTO> trigger(
                APIConnection connection, DatasourceConfiguration datasourceConfiguration, TriggerRequestDTO request) {
            try {
                WorkflowTrigger workflowTrigger = WorkflowTriggerStrategy.getWorkflowTrigger(request);
                return workflowTrigger.getTriggerResult();
            } catch (Exception exception) {
                return Mono.error(exception);
            }
        }
    }
}
