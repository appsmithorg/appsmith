package com.appsmith.server.repositories;

import com.appsmith.server.domains.Application;
import com.appsmith.server.repositories.ce.CustomApplicationRepositoryCEImpl;
import com.appsmith.server.solutions.ApplicationPermission;
import lombok.NonNull;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.ReactiveMongoOperations;
import org.springframework.data.mongodb.core.convert.MongoConverter;
import org.springframework.data.mongodb.core.query.BasicQuery;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;

import java.util.Set;

@Component
@Slf4j
public class CustomApplicationRepositoryImpl extends CustomApplicationRepositoryCEImpl
        implements CustomApplicationRepository {

    @Autowired
    public CustomApplicationRepositoryImpl(@NonNull ReactiveMongoOperations mongoOperations,
                                           @NonNull MongoConverter mongoConverter,
                                           CacheableRepositoryHelper cacheableRepositoryHelper,
                                           ApplicationPermission applicationPermission) {
        super(mongoOperations, mongoConverter, cacheableRepositoryHelper, applicationPermission);
    }

    @Override
    public Flux<Application> findDefaultApplicationsByWorkspaceIds(Set<String> workspaceIds) {
        // Leaving this code commented out for now. Once java starts supporting comparison of two fields in a document
        // while using criteria we can use this code to find the default applications.

//        Criteria workspaceCriteria = Criteria.where(FieldName.WORKSPACE_ID).in(workspaceIds);
//        // Filter out the applications which are not connected to git
//        QGitApplicationMetadata gitApplicationMetadata = QApplication.application.gitApplicationMetadata;
//        String gitApplicationMetadataPath = fieldName(gitApplicationMetadata);
//        String defaultBranchName = gitApplicationMetadataPath + "." + fieldName(gitApplicationMetadata.defaultBranchName);
//        String branchName = gitApplicationMetadataPath + "." + fieldName(gitApplicationMetadata.branchName);
//
//        Criteria gitApplicationMetadataCriteria = Criteria.where(fieldName(gitApplicationMetadata)).exists(false);
//        // Filter out applications where the ssh key is generated by user and the connect app has failed
//        Criteria notGitApplicationMetadataCriteria = new Criteria()
//                .andOperator(
//                        Criteria.where(fieldName(gitApplicationMetadata)).exists(true),
//                        Criteria.where(defaultBranchName).exists(false),
//                        Criteria.where(branchName).exists(false)
//                );
//
//        // Filter out applications where the DefaultBranchName is missing due to branch creation flow failures or corrupted scenarios
//        BasicQuery query = new BasicQuery("{ $expr:  { $eq:  [$" + defaultBranchName + ", $" + branchName + "]} }");
//
//        Criteria gitApplicationMetadataDefaultBranchNameCriteria = new Criteria()
//                .andOperator(
//                        Criteria.where(fieldName(gitApplicationMetadata)).exists(true),
//                        Criteria.where(defaultBranchName).exists(true),
//                        Criteria.where(branchName).exists(true),
//                        // This criteria is the only way I could figure out to compare 2 fields in the same document
//
//                        /*  ***** @Trisha *****
//                            This is the fixed query. Haven't tested it with actual Git data.
//                            But it works for applications without Git right now.
//                        */
//                        new Criteria()
////                        Criteria.where("$expr").is("{ $eq: [$" + defaultBranchName + ", $" + branchName + "]}")
////                        Criteria.where("$where").is("this." + defaultBranchName + " == this." + branchName)
//                );
//        query.addCriteria(gitApplicationMetadataCriteria);
//        Criteria gitCriteria = new Criteria()
//                .orOperator(gitApplicationMetadataCriteria,
//                        notGitApplicationMetadataCriteria,
//                        gitApplicationMetadataDefaultBranchNameCriteria);
//
//        return queryAllWithoutPermissions(
//                List.of(workspaceCriteria, gitCriteria),
//                null,
//                null,
//                NO_RECORD_LIMIT
//        );


        return mongoOperations.query(this.genericDomain)
                .matching(createQuery(workspaceIds))
                .all()
                .map(obj -> obj);
    }

    private BasicQuery createQuery(Set<String> workspaceIds) {

        // Unfortunately, due to java criteria not supporting comparison of 2 fields in the same document, building the
        // complete query manually from scratch.
        // TODO : Once this is fixed, we should go back to using criteria.

        StringBuilder sb = new StringBuilder();
        sb.append("{\n" +
                "    \"$and\": [\n" +
                "        {\n" +
                "            \"workspaceId\": {\n" +
                "                \"$in\": [");
        StringBuilder workspaceIdString = new StringBuilder();
        workspaceIds.forEach(workspaceId -> workspaceIdString.append("\"").append(workspaceId).append("\","));
        if (workspaceIdString.length() != 0) {
            workspaceIdString.deleteCharAt(workspaceIdString.length() - 1);
        }
        sb.append(workspaceIdString);
        sb.append("]}},\n" +
                        "        {\n" +
                        "            \"$or\": [\n" +
                        "                {\n" +
                        "                    \"gitApplicationMetadata\": {\n" +
                        "                        \"$exists\": false\n" +
                        "                    }\n" +
                        "                },\n" +
                        "                {\n" +
                        "                    \"$and\": [\n" +
                        "                        {\n" +
                        "                            \"gitApplicationMetadata\": {\n" +
                        "                                \"$exists\": true\n" +
                        "                            }\n" +
                        "                        },\n" +
                        "                        {\n" +
                        "                            \"gitApplicationMetadata.defaultBranchName\": {\n" +
                        "                                \"$exists\": false\n" +
                        "                            }\n" +
                        "                        },\n" +
                        "                        {\n" +
                        "                            \"gitApplicationMetadata.branchName\": {\n" +
                        "                                \"$exists\": false\n" +
                        "                            }\n" +
                        "                        }\n" +
                        "                    ]\n" +
                        "                },\n" +
                        "                {\n" +
                        "                    \"$and\": [\n" +
                        "                        {\n" +
                        "                            \"gitApplicationMetadata\": {\n" +
                        "                                \"$exists\": true\n" +
                        "                            }\n" +
                        "                        },\n" +
                        "                        {\n" +
                        "                            \"gitApplicationMetadata.defaultBranchName\": {\n" +
                        "                                \"$exists\": true\n" +
                        "                            }\n" +
                        "                        },\n" +
                        "                        {\n" +
                        "                            \"gitApplicationMetadata.branchName\": {\n" +
                        "                                \"$exists\": true\n" +
                        "                            }\n" +
                        "                        },\n" +
                        "                        {\n" +
                        "                            \"$expr\": {\n" +
                        "                                \"$eq\": [\n" +
                        "                                    \"$gitApplicationMetadata.defaultBranchName\",\n" +
                        "                                    \"$gitApplicationMetadata.branchName\"\n" +
                        "                                ]\n" +
                        "                            }\n" +
                        "                        }\n" +
                        "                    ]\n" +
                        "                }\n" +
                        "            ]\n" +
                        "        },\n" +
                        "        {\n" +
                        "            \"$or\": [\n" +
                        "                {\n" +
                        "                    \"deleted\": {\n" +
                        "                        \"$exists\": false\n" +
                        "                    }\n" +
                        "                },\n" +
                        "                {\n" +
                        "                    \"deleted\": false\n" +
                        "                }\n" +
                        "            ]\n" +
                        "        }\n" +
                        "    ]\n" +
                        "}");


        return new BasicQuery(sb.toString());
    }

}
