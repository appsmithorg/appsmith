package com.appsmith.server.helpers;

import com.appsmith.external.exceptions.pluginExceptions.AppsmithPluginException;
import com.appsmith.external.models.Datasource;
import com.appsmith.external.models.DatasourceConfiguration;
import com.appsmith.external.models.DatasourceTestResult;
import com.appsmith.external.models.OAuth2;
import org.apache.commons.lang3.ObjectUtils;

import java.util.HashMap;
import java.util.Map;

public class DatasourceAnalyticsUtils {

    public static Map<String, Object> getAnalyticsProperties(Datasource datasource) {
        Map<String, Object> analyticsProperties = new HashMap<>();
        analyticsProperties.put("orgId", datasource.getWorkspaceId());
        analyticsProperties.put("pluginName", datasource.getPluginName());
        analyticsProperties.put("pluginId",datasource.getPluginId());
        analyticsProperties.put("dsName", datasource.getName());
        analyticsProperties.put("workspaceId",datasource.getWorkspaceId());
        analyticsProperties.put("isConfigured",datasource.getIsConfigured());
        analyticsProperties.put("isAutoGenerated",datasource.getIsAutoGenerated());
        analyticsProperties.put("dsIsTemplate", ObjectUtils.defaultIfNull(datasource.getIsTemplate(), ""));
        analyticsProperties.put("dsIsMock", ObjectUtils.defaultIfNull(datasource.getIsMock(), ""));
        DatasourceConfiguration dsConfig = datasource.getDatasourceConfiguration();
        if (dsConfig != null && dsConfig.getAuthentication() != null && dsConfig.getAuthentication() instanceof OAuth2) {
            analyticsProperties.put("oAuthStatus", dsConfig.getAuthentication().getAuthenticationStatus());
        }
        return analyticsProperties;
    }

    public static Map<String,Object> getAnalyticsPropertiesForTestEventStatus
            (Datasource datasource, boolean status, Throwable e){
        Map<String, Object> analyticsProperties = getAnalyticsProperties(datasource);
        analyticsProperties.put("isSuccess",status);

        if(e == null){
            return analyticsProperties;
        }

        if(e instanceof AppsmithPluginException){
         analyticsProperties.put("errorCode",((AppsmithPluginException)e).getAppErrorCode());
        }
        analyticsProperties.put("errors",e.getMessage());
        return analyticsProperties;
    }

    public static Map<String,Object> getAnalyticsPropertiesForTestEventStatus
            (Datasource datasource, boolean status){
        Map<String, Object> analyticsProperties = getAnalyticsProperties(datasource);
        analyticsProperties.put("isSuccess",status);
        analyticsProperties.put("errors",datasource.getInvalids());
        return analyticsProperties;
    }

    public static Map<String,Object> getAnalyticsPropertiesForTestEventStatus
            (Datasource datasource, DatasourceTestResult datasourceTestResult){
        Map<String, Object> analyticsProperties = getAnalyticsProperties(datasource);
        analyticsProperties.put("isSuccess",datasourceTestResult.isSuccess());
        analyticsProperties.put("errors",datasourceTestResult.getInvalids());
        return analyticsProperties;
    }
}
