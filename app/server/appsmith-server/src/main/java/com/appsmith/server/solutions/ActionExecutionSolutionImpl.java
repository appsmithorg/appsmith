package com.appsmith.server.solutions;

import com.appsmith.external.dtos.ExecuteActionDTO;
import com.appsmith.external.models.ActionConfiguration;
import com.appsmith.external.models.ActionDTO;
import com.appsmith.external.models.AppsmithDomain;
import com.appsmith.external.models.Property;
import com.appsmith.server.applications.base.ApplicationService;
import com.appsmith.server.datasources.base.DatasourceService;
import com.appsmith.server.datasourcestorages.base.DatasourceStorageService;
import com.appsmith.server.domains.Plugin;
import com.appsmith.server.helpers.PluginExecutorHelper;
import com.appsmith.server.newactions.base.NewActionService;
import com.appsmith.server.newpages.base.NewPageService;
import com.appsmith.server.plugins.base.PluginService;
import com.appsmith.server.repositories.NewActionRepository;
import com.appsmith.server.services.AnalyticsService;
import com.appsmith.server.services.AuthenticationValidator;
import com.appsmith.server.services.ConfigService;
import com.appsmith.server.services.DatasourceContextService;
import com.appsmith.server.services.SessionUserService;
import com.appsmith.server.services.TenantService;
import com.appsmith.server.services.VariableReplacementService;
import com.appsmith.server.solutions.ce.ActionExecutionSolutionCEImpl;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.micrometer.observation.ObservationRegistry;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;

import java.util.ArrayList;
import java.util.Objects;

import static com.appsmith.server.constants.FieldName.COOKIE;

@Service
public class ActionExecutionSolutionImpl extends ActionExecutionSolutionCEImpl implements ActionExecutionSolution {

    private final VariableReplacementService variableReplacementService;

    public ActionExecutionSolutionImpl(
            NewActionService newActionService,
            ActionPermission actionPermission,
            ObservationRegistry observationRegistry,
            ObjectMapper objectMapper,
            NewActionRepository repository,
            DatasourceService datasourceService,
            PluginService pluginService,
            DatasourceContextService datasourceContextService,
            PluginExecutorHelper pluginExecutorHelper,
            NewPageService newPageService,
            ApplicationService applicationService,
            SessionUserService sessionUserService,
            AuthenticationValidator authenticationValidator,
            DatasourcePermission datasourcePermission,
            AnalyticsService analyticsService,
            DatasourceStorageService datasourceStorageService,
            EnvironmentPermission environmentPermission,
            VariableReplacementService variableReplacementService,
            ConfigService configService,
            TenantService tenantService) {
        super(
                newActionService,
                actionPermission,
                observationRegistry,
                objectMapper,
                repository,
                datasourceService,
                pluginService,
                datasourceContextService,
                pluginExecutorHelper,
                newPageService,
                applicationService,
                sessionUserService,
                authenticationValidator,
                datasourcePermission,
                analyticsService,
                datasourceStorageService,
                environmentPermission,
                configService,
                tenantService);

        this.variableReplacementService = variableReplacementService;
    }

    @Override
    public Mono<ActionDTO> getValidActionForExecution(ExecuteActionDTO executeActionDTO) {
        return super.getValidActionForExecution(executeActionDTO).flatMap(validAction -> {
            Mono<AppsmithDomain> actionConfigurationMono =
                    this.variableReplacementService.replaceAll(validAction.getActionConfiguration());
            return actionConfigurationMono.flatMap(configuration -> {
                validAction.setActionConfiguration((ActionConfiguration) configuration);
                return Mono.just(validAction);
            });
        });
    }

    @Override
    public Boolean isSendExecuteAnalyticsEvent() {
        // This is to send analytics event from NewActionService as part of event logging irrespective of telemetry
        // disabled status.
        // AnalyticsService would still prevent sending event to Analytics provider if telemetry is disabled
        return true;
    }

    @Override
    protected void setAutoGeneratedHeaders(Plugin plugin, ActionDTO actionDTO, HttpHeaders httpHeaders) {
        if (Boolean.TRUE.equals(plugin.getRequiresAppsmithUserContext())) {
            ActionConfiguration actionConfiguration = actionDTO.getActionConfiguration();
            // This is to avoid NPE.
            if (Objects.isNull(actionConfiguration.getAutoGeneratedHeaders())) {
                actionConfiguration.setAutoGeneratedHeaders(new ArrayList<>());
            }
            httpHeaders.forEach((key, value) -> {
                if (key.equalsIgnoreCase(COOKIE)) {
                    Property property = new Property(key, value.get(0));
                    actionConfiguration.getAutoGeneratedHeaders().add(property);
                }
            });
        }
    }
}
