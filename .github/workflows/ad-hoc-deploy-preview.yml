name: Ad-hoc DP | Build Push Deploy from branch ( To be used by ops.appsmith.com API layer only)

on:
  # This workflow is only triggered by the `/build-deploy-preview` command dispatch
  workflow_dispatch:
    inputs:
      branch:
        description: "Github Branch to be deployed"
        required: true
        default: "release"
      skip-tests:
        description: "Flag to skip tests durin build"
        required: true
        default: "true"
      uid:
        description: "Unique ID to store the run data in the db"
        required: true
      sub-domain-name:
        description: "Sub-domain for dp.appsmith.com to by used by this deploy preview (This will also be the image name and the k8s namespace identifier)"
        required: true
jobs:
  # write-job-details-to-db:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install mongosh
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y wget gnupg
  #         wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
  #         echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
  #         sudo apt-get update
  #         sudo apt-get install -y mongodb-mongosh
  #     - name: Update job data to mongoDB
  #       run: |
  #         #  mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.insert( { run_id: ${{ github.run_id }}, uid: ${{ github.event.inputs.uid }}, status: "Started" } )'
  #         mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.update(
  #                                                                 { _id:  ${{ github.event.inputs.uid }} },
  #                                                                 {
  #                                                                   $set: {
  #                                                                     run_id: ${{ github.run_id }},
  #                                                                     status: "BUILD IN PROGRESS"
  #                                                                   }
  #                                                                 }
  #                                                               )'
  #         #TODO Add mongo URI as secret
            
  server-build:
    runs-on: ubuntu-latest-8-cores
    defaults:
      run:
        working-directory: app/server
        shell: bash

    # Service containers to run with this job. Required for running tests
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image for Redis
        image: redis
        ports:
          # Opens tcp port 6379 on the host and service container
          - 6379:6379

    steps:
  
      - name: Check out the build branch
        uses: actions/checkout@v3
        with:
          # fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}
     

      # In case this is second attempt try restoring status of the prior attempt from cache
      - name: Restore the previous run result
        uses: actions/cache@v3
        with:
          path: |
            ~/run_result
          key: ${{ github.run_id }}-${{ github.job }}-server


      # Fetch prior run result
      - name: Get the previous run result
        id: run_result
        run: cat ~/run_result 2>/dev/null || echo 'default'


      # In case of prior failure run the job
      - if: steps.run_result.outputs.run_result != 'success'
        run: echo "I'm alive!" && exit 0


      # Setup Java
      - name: Set up JDK 17
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Retrieve maven dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache maven dependencies
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/cache@v3
        env:
          cache-name: cache-maven-dependencies
        with:
          # maven dependencies are stored in `~/.m2` on Linux/macOS
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Here, the GITHUB_REF is of type /refs/head/<branch_name>. We extract branch_name from this by removing the
      # first 11 characters. This can be used to build images for several branches
      # Since this is an unreleased build, we get the latest released version number, increment the minor number in it,
      # append a `-SNAPSHOT` at it's end to prepare the snapshot version number. This is used as the project's version.
      - name: Get the version to tag the Docker image
        if: steps.run_result.outputs.run_result != 'success'
        id: vars
        run: |
          # Since this is an unreleased build, we set the version to incremented version number with a
          # `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo version=$next_version-SNAPSHOT >> $GITHUB_OUTPUT
          echo tag=$(echo ${GITHUB_REF:11}) >> $GITHUB_OUTPUT

      # Build and test the code
      - name: Build and test
        if: steps.run_result.outputs.run_result != 'success'
        env:
          ACTIVE_PROFILE: test
          APPSMITH_MONGODB_URI: "mongodb://localhost:27017/mobtools"
          APPSMITH_CLOUD_SERVICES_BASE_URL: "https://release-cs.appsmith.com"
          APPSMITH_REDIS_URL: "redis://127.0.0.1:6379"
          APPSMITH_ENCRYPTION_PASSWORD: "password"
          APPSMITH_ENCRYPTION_SALT: "salt"
          APPSMITH_IS_SELF_HOSTED: false
          APPSMITH_ENVFILE_PATH: /tmp/dummy.env
        run: |
          if [[ "${{ github.event.inputs.skip-tests }}" == "true" ]]
          then
            args=-DskipTests
          fi
          mvn --batch-mode versions:set \
            -DnewVersion=${{ steps.vars.outputs.version }} \
            -DgenerateBackupPoms=false \
            -DprocessAllModules=true
          ./build.sh $args

      # Restore the previous built bundle if present. If not push the newly built into the cache
      - name: Restore the previous bundle
        uses: actions/cache@v3
        with:
          path: |
            app/server/dist/
          key: ${{ github.run_id }}-${{ github.job }}-server

      # Upload the build artifact so that it can be used by the test & deploy job in the workflow
      - name: Upload server build bundle
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: app/server/dist/

      - name: Save the status of the run
        run: echo "run_result=success" >> $GITHUB_OUTPUT > ~/run_result
          
  client-build:
      runs-on: ubuntu-latest-8-cores
    # Only run this workflow for internally triggered events
      defaults:
        run:
          working-directory: app/client
          shell: bash

      steps:
        - name: Checkout the build branch
          uses: actions/checkout@v3
          with:
            # fetch-depth: 0
            ref: ${{ github.event.inputs.branch }}



        # get all the files changes in the cypress/e2e folder    
        - name: Get added files in cypress/e2e folder
          if: inputs.pr != 0
          id: files
          uses: umani/changed-files@v4.0.0
          with:
            repo-token: ${{ secrets.APPSMITH_CI_TEST_PAT }}
            pattern: 'app/client/cypress/e2e/.*'
            pr-number: ${{ inputs.pr }}
            

        # In case this is second attempt try restoring status of the prior attempt from cache
        - name: Restore the previous run result
          uses: actions/cache@v3
          with:
            path: |
              ~/run_result
            key: ${{ github.run_id }}-${{ github.job }}-client

        # Fetch prior run result
        - name: Get the previous run result
          id: run_result
          run: cat ~/run_result 2>/dev/null || echo 'default'

        # In case of prior failure run the job
        - if: steps.run_result.outputs.run_result != 'success'
          run: echo "I'm alive!" && exit 0

        - name: Use Node.js 16.14.0
          if: steps.run_result.outputs.run_result != 'success'
          uses: actions/setup-node@v3
          with:
            node-version: "16.14.0"

        # actions/setup-node@v3 doesnâ€™t work properly with Yarn 3
        # when the project lives in a subdirectory: https://github.com/actions/setup-node/issues/488
        # Restoring the cache manually instead
        - name: Restore Yarn cache
          if: steps.run_result.outputs.run_result != 'success'
          uses: actions/cache@v3
          with:
            path: app/client/.yarn/cache
            key: v1-yarn3-${{ hashFiles('app/client/yarn.lock') }}
            restore-keys: |
              v1-yarn3-

        # Install all the dependencies
        - name: Install dependencies
          if: steps.run_result.outputs.run_result != 'success'
          run: yarn install --immutable

        # Type checking before starting the build
        - name: Run type check
          if: steps.run_result.outputs.run_result != 'success'
          run: yarn run check-types

        - name: Set the build environment based on the branch
          if: steps.run_result.outputs.run_result != 'success'
          id: vars
          run: |
            echo "REACT_APP_ENVIRONMENT=DEVELOPMENT" >> $GITHUB_OUTPUT
            if [[ "${{github.ref}}" == "refs/heads/master" ]]; then
                echo "REACT_APP_ENVIRONMENT=PRODUCTION" >> $GITHUB_OUTPUT
            fi
            if [[ "${{github.ref}}" == "refs/heads/release" ]]; then
                echo "REACT_APP_ENVIRONMENT=STAGING" >> $GITHUB_OUTPUT
            fi
            # Since this is an unreleased build, we set the version to incremented version number with
            # a `-SNAPSHOT` suffix.
            latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
            echo "latest_released_version = $latest_released_version"
            next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
            echo "next_version = $next_version"
            echo version=$next_version-SNAPSHOT >> $GITHUB_OUTPUT

        # We burn React environment & the Segment analytics key into the build itself.
        # This is to ensure that we don't need to configure it in each installation
        - name: Create the bundle
          run: |
            if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
              export REACT_APP_SEGMENT_CE_KEY="${{ secrets.APPSMITH_SEGMENT_CE_KEY }}"
            else
              export REACT_APP_SEGMENT_CE_KEY="${{ secrets.APPSMITH_SEGMENT_CE_KEY_RELEASE }}"
            fi
            REACT_APP_ENVIRONMENT=${{steps.vars.outputs.REACT_APP_ENVIRONMENT}} \
              REACT_APP_FUSIONCHARTS_LICENSE_KEY=${{ secrets.APPSMITH_FUSIONCHARTS_LICENSE_KEY }} \
              SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
              REACT_APP_VERSION_ID=${{ steps.vars.outputs.version }} \
              REACT_APP_VERSION_RELEASE_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ') \
              REACT_APP_VERSION_EDITION="Community" \
              yarn build

        # Saving the cache to use it in subsequent runs
        - name: Save Yarn cache
          uses: actions/cache/save@v3
          with:
            path: app/client/.yarn/cache
            key: v1-yarn3-${{ hashFiles('app/client/yarn.lock') }}
            restore-keys: |
              v1-yarn3-

        # Restore the previous built bundle if present. If not push the newly built into the cache
        - name: Restore the previous bundle
          uses: actions/cache@v3
          with:
            path: |
              app/client/build/
            key: ${{ github.run_id }}-${{ github.job }}-client

        - name: Pack the client build directory
          run: |
            tar -cvf ./build.tar -C build .

        # Upload the build artifact so that it can be used by the test & deploy job in the workflow
        - name: Upload react build bundle
          uses: actions/upload-artifact@v3
          with:
            name: client-build
            path: app/client/build.tar

        # Set status = success
        - name: Save the status of the run
          run: echo "run_result=success" >> $GITHUB_OUTPUT > ~/run_result

  rts-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/client/packages/rts
        shell: bash

    steps:

      - name: Checkout the build branch
        uses: actions/checkout@v3
        with:
          ref:  ${{ github.event.inputs.branch }}

      - name: Set up Depot CLI
        uses: depot/setup-action@v1

      # In case this is second attempt try restoring status of the prior attempt from cache
      - name: Restore the previous run result
        uses: actions/cache@v3
        with:
          path: |
            ~/run_result
          key: ${{ github.run_id }}-${{ github.job }}-rts

      # Fetch prior run result
      - name: Get the previous run result
        id: run_result
        run: cat ~/run_result 2>/dev/null || echo 'default'

      # In case of prior failure run the job
      - if: steps.run_result.outputs.run_result != 'success'
        run: echo "I'm alive!" && exit 0

      - name: Use Node.js 16.14.0
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/setup-node@v3
        with:
          node-version: "16.14.0"

      # actions/setup-node@v3 doesnâ€™t work properly with Yarn 3
      # when the project lives in a subdirectory: https://github.com/actions/setup-node/issues/488
      # Restoring the cache manually instead
      - name: Restore Yarn cache
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/cache@v3
        with:
          path: app/client/.yarn/cache
          key: v1-yarn3-${{ hashFiles('app/client/yarn.lock') }}
          restore-keys: |
            v1-yarn3-

      # Here, the GITHUB_REF is of type /refs/head/<branch_name>. We extract branch_name from this by removing the
      # first 11 characters. This can be used to build images for several branches
      # Since this is an unreleased build, we get the latest released version number, increment the minor number in it,
      # append a `-SNAPSHOT` at it's end to prepare the snapshot version number. This is used as the project's version.
      - name: Get the version to tag the Docker image
        if: steps.run_result.outputs.run_result != 'success'
        id: vars
        run: |
          # Since this is an unreleased build, we set the version to incremented version number with a
          # `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo version=$next_version-SNAPSHOT >> $GITHUB_OUTPUT
          echo tag=$(echo ${GITHUB_REF:11}) >> $GITHUB_OUTPUT

      # Install all the dependencies
      - name: Install dependencies
        if: steps.run_result.outputs.run_result != 'success'
        run: yarn install --immutable
        working-directory: app/client/packages/rts

      # Run the Jest tests only if the workflow has been invoked in a PR
      - name: Run the jest tests
        if: steps.run_result.outputs.run_result != 'success'
        run: yarn run test:unit
        working-directory: app/client/packages/rts

      - name: Build
        if: steps.run_result.outputs.run_result != 'success'
        run: |
          echo 'export const VERSION = "${{ steps.vars.outputs.version }}"' > src/version.js
          yarn build

      # Set status = failure
      - name: Set result as failed if there are build failures
        if: failure()
        run: |
          echo "run_result=failed" >> $GITHUB_OUTPUT > ~/run_result
          exit 1;
        working-directory: app/client/packages/rts

      # Restore the previous built bundle if present. If not push the newly built into the cache
      - name: Restore the previous bundle
        uses: actions/cache@v3
        with:
          path: |
            app/client/packages/rts/dist/
          key: ${{ github.run_id }}-${{ github.job }}-rts

      # Tar the bundles to speed up the upload & download process
      - name: Tar the rts bundles
        run: |
          tar -cvf rts-dist.tar dist
        working-directory: app/client/packages/rts

      # Upload the build artifacts and dependencies so that it can be used by the test & deploy job in other workflows
      - name: Upload rts build bundle
        uses: actions/upload-artifact@v3
        with:
          name: rts-dist
          path: app/client/packages/rts/rts-dist.tar

      # Set status = success
      - name: Save the status of the run
        run: echo "run_result=success" >> $GITHUB_OUTPUT > ~/run_result

  push-image:
    needs: [client-build, rts-build, server-build]
    runs-on: ubuntu-latest
    if: success()
    steps:
      # - name: Install mongosh
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y wget gnupg
      #     wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
      #     echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
      #     sudo apt-get update
      #     sudo apt-get install -y mongodb-mongosh
      # - name: Update job data to mongoDB
      #   run: |
      #     #  mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.insert( { run_id: ${{ github.run_id }}, uid: ${{ github.event.inputs.uid }}, status: "Started" } )'
      #     mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.update(
      #                                                             { _id:  ${{ github.event.inputs.uid }} },
      #                                                             {
      #                                                               $set: {
      #                                                                 status: "BUILD SUCCESSFUL"
      #                                                               }
      #                                                             }
      #                                                           )'
      - name: Set up Depot CLI
        uses: depot/setup-action@v1

      # Check out merge commit
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: "refs/pull/${{ github.event.client_payload.pull_request.number }}/merge"

      # Timestamp will be used to create cache key
      - id: timestamp
        run: echo "timestamp=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      # get Git-hash will be used to create cache key
      - id: git_hash
        run: echo "git_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Download the client build artifact
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: app/client

      - name: Unpack the client build artifact
        if: steps.run_result.outputs.run_result != 'success'
        run: |
          mkdir -p app/client/build
          tar -xvf app/client/build.tar -C app/client/build

      - name: Download the server build artifact
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: app/server/dist

      - name: Download the rts build artifact
        uses: actions/download-artifact@v3
        with:
          name: rts-dist
          path: app/client/packages/rts/dist

      - name: Untar the rts folder
        run: |
          tar -xvf app/client/packages/rts/dist/rts-dist.tar -C app/client/packages/rts/
          echo "Cleaning up the tar files"
          rm app/client/packages/rts/dist/rts-dist.tar

      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          repository: ${{ vars.DOCKER_HUB_ORGANIZATION }}/appsmith-dp
          tags: ${{ github.event.inputs.sub-domain-name }}
    outputs:
      imageHash: ${{ github.event.inputs.sub-domain-name }}

  build-deploy-preview:
    needs: [push-image]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "."

    if: success()
    steps:
      - name: Install mongosh
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
      - name: Update job data to mongoDB
        run: |
          #  mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.insert( { run_id: ${{ github.run_id }}, uid: ${{ github.event.inputs.uid }}, status: "Started" } )'
          mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.update(
                                                                  { _id:  ${{ github.event.inputs.uid }} },
                                                                  {
                                                                    $set: {
                                                                      status: "DEPLOYMENT IN PROGRESS"
                                                                    }
                                                                  }
                                                                )'
      - name: Set up Depot CLI
        uses: depot/setup-action@v1
      - name: Checkout PR
        uses: actions/checkout@v3
        with:
          ref: "refs/pull/${{ github.event.client_payload.pull_request.number }}/merge"
          fetch-depth: 0

      - name: Install relevant packages
        run: |
          which aws
          sudo apt update -q && sudo apt install -y curl unzip less jq
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl && \
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl && \
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && \
          chmod 700 get_helm.sh; ./get_helm.sh

      - name: Deploy Helm chart
        env:
          AWS_ROLE_ARN: ${{ secrets.APPSMITH_EKS_AWS_ROLE_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.APPSMITH_CI_AWS_SECRET_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.APPSMITH_CI_AWS_SECRET_ACCESS_KEY }}
          IMAGE_HASH: ${{ needs.push-image.outputs.imageHash }}
          AWS_RELEASE_CERT: ${{ secrets.APPSMITH_AWS_RELEASE_CERT_RELEASE }}
          DOCKER_HUB_ORGANIZATION: ${{ vars.DOCKER_HUB_ORGANIZATION }}
          DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          SUB_DOMAIN_NAME: ${{ github.event.inputs.sub-domain-name }}
          RECREATE: ${{ github.event.client_payload.slash_command.args.named.recreate }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_URL: ${{ secrets.DB_URL }}
        run: |
          echo "environment variables set to deploy the image" $IMAGE_HASH
          /bin/bash ./scripts/build_dp_form_branch.sh

  update-db-on-completion:
    needs: [build-deploy-preview]
    runs-on: ubuntu-latest
    if: success()
    steps:
      # This step creates a comment on the PR with a link to this workflow run.
      - name: Install mongosh
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg
          wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-mongosh
      # - name: Update job data to mongoDB
      #   run: |
      #     #  mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.insert( { run_id: ${{ github.run_id }}, uid: ${{ github.event.inputs.uid }}, status: "Started" } )'
      #     mongosh '' --eval 'db.appsmiht-ce-github-dp-runs.update(
      #                                                             { _id:  ${{ github.event.inputs.uid }} },
      #                                                           {
      #                                                             $set: {
      #                                                               status: "DEPLOYMENT COMPLETE"
      #                                                               url: https://${{ github.event.inputs.sub-domain-name }}.dp.appsmith.com
      #                                                             }
      #                                                           }
      #                                                         )'

