# This workflow is responsible for syncing the release branch from the community edition repository
name: Sync Community workflow

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: Dry Run
        type: boolean
        required: false
        default: false

  schedule:
    - cron: "0 * * * *"

jobs:
  repo-sync:
    runs-on: appsmith-self-hosted-deployment-runner

    steps:
      - uses: actions/checkout@v3
        with:
          ref: release
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB }}

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: app/client/package.json

      # actions/setup-node@v3 doesnâ€™t work properly with Yarn 3
      # when the project lives in a subdirectory: https://github.com/actions/setup-node/issues/488
      # Restoring the cache manually instead
      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: app/client/.yarn/cache
          key: v1-yarn3-${{ hashFiles('app/client/yarn.lock') }}
          restore-keys: |
            v1-yarn3-

      - name: Pull from CE release
        id: merge
        run: |
          set -o errexit
          set -o nounset
          set -o xtrace

          output-var() {
            local eof="$(dd if=/dev/urandom bs=15 count=1 status=none | base64)"
            echo "$1<<$eof"
            echo "$2"
            echo "$eof"
          } >> "$GITHUB_OUTPUT"

          git config user.email "automated@github.com"
          git config user.name "Automated Github Action"

          git remote add community https://github.com/appsmithorg/appsmith.git
          git fetch community release

          last_common_ancestor="$(git merge-base origin/release community/release)"  # Commit SHA of the last common ancestor.
          echo "Last common ancestor commit at '$last_common_ancestor':"
          echo "    https://github.com/appsmithorg/appsmith/commit/$last_common_ancestor"
          echo "    https://github.com/appsmithorg/appsmith-ee/commit/$last_common_ancestor"
          output-var common_parent_sha "$last_common_ancestor"

          commits_to_pull_from_ce="$(git log --format=%H "$last_common_ancestor"...community/release)"
          commit_info_to_pull_from_ce="$(git log --format='%H %ae' "$last_common_ancestor"...community/release)"
          echo "List of commits to pull from CE:"
          echo "$commit_info_to_pull_from_ce" | sed 's/^/    /'
          output-var commits_list "$commit_info_to_pull_from_ce"

          merge_head="$(git rev-parse community/release)"
          echo "CE release is at '$merge_head' (this should match with the first item in the above list)"

          if [[ "$last_common_ancestor" == "$merge_head" ]]; then
            echo "Already up to date. Not merging anything."
            exit
          fi

          try-merge() {
            if ! git merge "$1" --no-edit -m 'Sync community release'; then
              CONFLICT_FILES="$(git status --short | awk '$1 == "UU" {print $2}')"
              if [[ "$CONFLICT_FILES" == ".github/config.json" ]]; then
                # The `:3:` gets the file from CE here. See <https://git-scm.com/docs/gitrevisions#Documentation/gitrevisions.txt-emltngtltpathgtemegem0READMEememREADMEem>.
                git show :3:.github/config.json > .github/config.json
                git add .github/config.json
                git commit -m 'Merge CE, conflict in config.json'
              else
                return 1
              fi
            fi
          }

          merge_success_at=''
          full_conflicts_summary=''

          for commit in $commits_to_pull_from_ce; do
            echo "Trying to merge upto '$commit'"
            if try-merge "$commit"; then
              echo "Merged successfully upto '$commit'"
              merge_success_at="$commit"
              output-var merged_upto_sha "$commit"
              break
            else
              if [[ -z "$full_conflicts_summary" ]]; then
                full_conflicts_summary="$(echo "$CONFLICT_FILES" | sort | cat -n)"
                output-var conflicts "$full_conflicts_summary"
              fi
              echo "Merge failed at '$commit', aborting."
              git merge --abort
            fi
          done

          echo "Pushing synced changes, if any"
          git remote set-url origin 'https://${{ github.actor }}:${{ secrets.PAT_GITHUB }}@github.com/${{ github.repository }}.git'
          git config --local --add safe.directory "${{ github.workspace }}"

          declare -a push_args
          if [[ '${{ inputs.dry_run }}' == true ]]; then
            push_args+=(--dry-run)
          fi
          git push "${push_args[@]}" origin release

          if [[ "$merge_head" != "$merge_success_at" ]]; then
            if [[ -n "$merge_success_at" ]]; then
              echo "Merged commits upto '$merge_success_at'."
            fi
            exit 1
          fi

      - name: Notify failure on workflow run and on Slack
        if: failure()
        run: |
          set -o errexit
          set -o nounset
          set -o xtrace

          run_url='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          common_parent_sha='${{ steps.merge.outputs.common_parent_sha }}'
          common_parent_sha_short="$(echo "$common_parent_sha" | grep -o '^.\{8\}' || true)"
          merged_upto_sha='${{ steps.merge.outputs.merged_upto_sha }}'
          merged_upto_sha_short="$(echo "$merged_upto_sha" | grep -o '^.\{8\}' || true)"

          details="ðŸš¨ EE code sync failed in <$run_url|${{ github.run_id }}>. Conflicts in:
          \`\`\`
          ${{ steps.merge.outputs.conflicts }}
          \`\`\`

          Common parent at $common_parent_sha_short, [view on CE](https://github.com/appsmithorg/appsmith/commit/$common_parent_sha), [view on EE](https://github.com/appsmithorg/appsmith-ee/commit/$common_parent_sha).
          $(
            if [[ -z "$merged_upto_sha" ]]; then
              echo "Couldn't sync anything."
            else
              echo "Merged upto $merged_upto_sha_short, [view on CE](https://github.com/appsmithorg/appsmith/commit/$merged_upto_sha), [view on EE](https://github.com/appsmithorg/appsmith-ee/commit/$merged_upto_sha)."
            fi
          )
          List of commits tried to pull:
          $(
            echo "${{ steps.merge.outputs.commits_list }}" | awk -F ',| |\r' 'NR==FNR{a[$1]=$2; next} $2 in a{$2=a[$2]} {print "["$1"](https://github.com/appsmithorg/appsmith/commit/"$1")", "<@"$2">"}' $GITHUB_WORKSPACE/.github/slack_ids.csv -
          )
          "

          echo "$details" >> "$GITHUB_STEP_SUMMARY"

          # This unwieldy horror of a sed command, converts standard Markdown links to Slack's unwieldy link syntax.
          slack_message="$(echo "$details" | sed -E 's/\[([^]]+)\]\(([^)]+)\)/<\2|\1>/g')"

          # This is the ChannelId of the tech channel.
          body="$(jq -nc \
            --arg channel CGBPVEJ5C \
            --arg text "$slack_message" \
            '$ARGS.named'
          )"

          curl --version
          curl -v https://slack.com/api/chat.postMessage \
            --header 'Authorization: Bearer ${{ secrets.SLACK_APPSMITH_ALERTS_TOKEN }}' \
            --header 'Content-Type: application/json; charset=utf-8' \
            --data-raw "$body"
