# This workflow is responsible for building, testing & packaging the Java server codebase
name: Test Build Cache

on:
  workflow_dispatch:
    inputs:
      pr:
        description: "Pull Request Number"
        required: false
        default: ""

jobs:
  server-unit-tests:
    runs-on: ubuntu-latest

    steps:
      # Check out the repository based on the provided PR or default branch
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          ref: ${{ inputs.pr && format('refs/pull/{0}/merge', inputs.pr) || github.ref_name }}

      # Fetch server build from cache
      - name: Fetch server build from cache
        env:
          cachetoken: ${{ secrets.CACHETOKEN }}
          reponame: ${{ secrets.REPOSITORYNAME }}
          gituser: ${{ secrets.CACHE_GIT_USER }}
          gituseremail: ${{ secrets.CACHE_GIT_EMAIL }}
        run: |
          set -e
          mkdir cacherepo
          cd ./cacherepo
          
          git lfs install
          git config --global user.email "$gituseremail"
          git config --global user.name "$gituser"
          git clone https://$cachetoken@github.com/appsmithorg/cibuildcache.git

          if [ "$reponame" = "appsmith" ]; then
              export repodir="CE"
          elif [ "$reponame" = "appsmith-ee" ]; then
              export repodir="EE"
          elif [ "$reponame" = "appsmith-sagar-version" ]; then
              export repodir="CE"
          else
              echo "Warning: Unknown repository name: $reponame"
              export repodir="UNKNOWN"  # Optional: Set a default or fallback value
          fi


          cd cibuildcache/$repodir/release/server
          if [ ! -f ./server.jar ]; then
            echo "Error: server.jar not found in the cache. Exiting."
            exit 1
          fi

          mv ./server.jar ../../../../../server.jar
          cd ../../../../../
          tar -xzvf ./server.jar || { echo "Error extracting server.jar"; exit 1; }