name: Test, build and push Docker Image Fat migration

on:
  # This line enables manual triggering of this workflow.
  workflow_dispatch:

jobs:
  ci-test:
    # Only run if the build step is successful
    # If the build has been triggered manually via workflow_dispatch or via a push to protected branches
    # then we don't check for the PR approved state
    if: |
      success() &&
      (github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'pull_request_review' &&
      github.event.review.state == 'approved' &&
      github.event.pull_request.head.repo.full_name == github.repository))
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        #job: [ 0, 1, 2, 3, 4, 5,  6, 7,  8, 9,  10, 11,  12, 13,  14, 15,  16, 17,  18, 19,  20,  21,  22,  23 ]
        job: [ 0 ]

    # Service containers to run with this job. Required for running tests
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image for Redis
        image: redis
        ports:
          # Opens tcp port 6379 on the host and service container
          - 6379:6379
      mongo:
        image: mongo
        ports:
          - 27017:27017

    steps:
      # Checkout the code
      - name: Checkout the merged commit from PR and base branch
        if: github.event_name == 'pull_request_review'
        uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Checkout the head commit of the branch
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v3

      # Timestamp will be used to create cache key
      - id: timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%dT%H:%M:%S')"

      # In case this is second attempt try restoring status of the prior attempt from cache
      - name: Restore the previous run result
        uses: martijnhols/actions-cache@v3.0.2
        with:
          path: |
            ~/run_result
          key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}

      # Fetch prior run result
      - name: Get the previous run result
        id: run_result
        run: cat ~/run_result 2>/dev/null || echo 'default'

      # In case this is second attempt try restoring failed tests
      - name: Restore the previous failed combine result
        if: steps.run_result.outputs.run_result == 'failedtest'
        uses: martijnhols/actions-cache/restore@v3
        with:
          path: |
            ~/combined_failed_spec_ci
          key: ${{ github.run_id }}-"ui-test-result"
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}

      # failed_spec_env will contain list of all failed specs
      # We are using evnironment variable instead of regular to support multiline
      - name: Get failed_spec
        if: steps.run_result.outputs.run_result == 'failedtest'
        run: |
          failed_spec_env=$(cat ~/combined_failed_spec_ci)
          echo "failed_spec_env<<EOF" >> $GITHUB_ENV
          echo "$failed_spec_env" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - if: steps.run_result.outputs.run_result != 'success' && steps.run_result.outputs.run_result != 'failedtest'
        run: echo "Starting full run" && exit 0

      - if: steps.run_result.outputs.run_result == 'failedtest'
        run: echo "Rerunning failed tests" && exit 0

      - name: cat run_result
        run: echo ${{ steps.run_result.outputs.run_result }}

      # Setup Java
      - name: Set up JDK 17
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Create folder
        if: steps.run_result.outputs.run_result != 'success'
        env:
          APPSMITH_LICENSE_KEY: ${{ secrets.APPSMITH_LICENSE_KEY }}
        working-directory: "."
        run: |
          mkdir -p cicontainerlocal/stacks/configuration/
          mkdir -p cicontainerlocal/oldstack

      - name: Load docker image
        if: steps.run_result.outputs.run_result != 'success'
        env:
          APPSMITH_LICENSE_KEY: ${{ secrets.APPSMITH_LICENSE_KEY }}
        working-directory: "."
        run: |
          sudo /etc/init.d/ssh stop ;   
          mkdir -p `pwd`/git-server/keys
          mkdir -p `pwd`/git-server/repos
          docker run --name test-event-driver -d -p 2222:22 -p 5001:5001 -p 3306:3306 \
          -p 5432:5432 -p 28017:27017 -p 25:25 -p 5000:5000 -p 3000:3000 --volume /:/host \
          -v ~/git-server/repos:/git-server/repos  appsmith/test-event-driver:latest
          cd cicontainerlocal
          docker run -d --name appsmith -p 80:80 -p 9001:9001 --add-host=host.docker.internal:host-gateway \
            -v "$PWD/stacks:/appsmith-stacks" -e APPSMITH_LICENSE_KEY=$APPSMITH_LICENSE_KEY \
            -e APPSMITH_CLOUD_SERVICES_BASE_URL=http://host.docker.internal:5001 \
            appsmith/appsmith-ce:release

      - name: Use Node.js 16.14.0
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/setup-node@v1
        with:
          node-version: "16.14.0"

      # Install all the dependencies
      - name: Install dependencies
        if: steps.run_result.outputs.run_result != 'success'
        run: |
          cd app/client
          yarn install \
          --cwd cypress \
          --modules-folder ../node_modules

      - name: Setting up the cypress tests
        if: steps.run_result.outputs.run_result != 'success'
        shell: bash
        env:
          APPSMITH_SSL_CERTIFICATE: ${{ secrets.APPSMITH_SSL_CERTIFICATE }}
          APPSMITH_SSL_KEY: ${{ secrets.APPSMITH_SSL_KEY }}
          CYPRESS_URL: ${{ secrets.CYPRESS_URL }}
          CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
          CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
          CYPRESS_TESTUSERNAME1: ${{ secrets.CYPRESS_TESTUSERNAME1 }}
          CYPRESS_TESTPASSWORD1: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
          CYPRESS_TESTUSERNAME2: ${{ secrets.CYPRESS_TESTUSERNAME2 }}
          CYPRESS_TESTPASSWORD2: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
          CYPRESS_TESTUSERNAME3: ${{ secrets.CYPRESS_TESTUSERNAME3 }}
          CYPRESS_TESTPASSWORD3: ${{ secrets.CYPRESS_TESTPASSWORD3 }}
          CYPRESS_TESTUSERNAME4: ${{ secrets.CYPRESS_TESTUSERNAME4 }}
          CYPRESS_TESTPASSWORD4: ${{ secrets.CYPRESS_TESTPASSWORD4 }}
          CYPRESS_S3_ACCESS_KEY: ${{ secrets.CYPRESS_S3_ACCESS_KEY }}
          CYPRESS_S3_SECRET_KEY: ${{ secrets.CYPRESS_S3_SECRET_KEY }}
          CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN }}
          CYPRESS_GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          CYPRESS_AIRTABLE_BEARER: ${{ secrets.AIRTABLE_BEARER }}
          CYPRESS_FIRESTORE_PRIVATE_KEY: ${{ secrets.FIRESTORE_PRIVATE_KEY }}
          CYPRESS_TEST_GITHUB_USER_NAME: ${{ secrets.CYPRESS_TEST_GITHUB_USER_NAME }}
          CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID }}
          CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET }}
          CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID }}
          CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET }}
          APPSMITH_DISABLE_TELEMETRY: true
          APPSMITH_GOOGLE_MAPS_API_KEY: ${{ secrets.APPSMITH_GOOGLE_MAPS_API_KEY }}
          POSTGRES_PASSWORD: postgres
        run: |
          cd app/client
          chmod a+x ./cypress/setup-test-ci.sh
          ./cypress/setup-test-ci.sh

      - uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable
      - run: |
          echo "BROWSER_PATH=$(which chrome)" >> $GITHUB_ENV

      - name: Run the cypress test
        if: steps.run_result.outputs.run_result != 'success' && steps.run_result.outputs.run_result != 'failedtest'
        uses: cypress-io/github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
          CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
          CYPRESS_TESTUSERNAME1: ${{ secrets.CYPRESS_TESTUSERNAME1 }}
          CYPRESS_TESTPASSWORD1: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
          CYPRESS_TESTUSERNAME2: ${{ secrets.CYPRESS_TESTUSERNAME2 }}
          CYPRESS_TESTPASSWORD2: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
          CYPRESS_TESTUSERNAME3: ${{ secrets.CYPRESS_TESTUSERNAME3 }}
          CYPRESS_TESTPASSWORD3: ${{ secrets.CYPRESS_TESTPASSWORD3 }}
          CYPRESS_TESTUSERNAME4: ${{ secrets.CYPRESS_TESTUSERNAME4 }}
          CYPRESS_TESTPASSWORD4: ${{ secrets.CYPRESS_TESTPASSWORD4 }}
          CYPRESS_S3_ACCESS_KEY: ${{ secrets.CYPRESS_S3_ACCESS_KEY }}
          CYPRESS_S3_SECRET_KEY: ${{ secrets.CYPRESS_S3_SECRET_KEY }}
          CYPRESS_GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          CYPRESS_AIRTABLE_BEARER: ${{ secrets.AIRTABLE_BEARER }}
          CYPRESS_FIRESTORE_PRIVATE_KEY: ${{ secrets.FIRESTORE_PRIVATE_KEY }}
          CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN }}
          CYPRESS_TEST_GITHUB_USER_NAME: ${{ secrets.CYPRESS_TEST_GITHUB_USER_NAME }}
          CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID }}
          CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET }}
          CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID }}
          CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET }}
          APPSMITH_DISABLE_TELEMETRY: true
          APPSMITH_GOOGLE_MAPS_API_KEY: ${{ secrets.APPSMITH_GOOGLE_MAPS_API_KEY }}
          COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
        with:
          browser: ${{ env.BROWSER_PATH }}
          headless: true
          record: true
          install: false
          parallel: true
          config-file: cypress_ci.json
          group: "Electrons on Github Action Fat Container"
          spec: "cypress/integration/Regression_TestSuite/ServerSideTests/Datasources/*"
          working-directory: app/client
          # tag will be either "push" or "pull_request"
          tag: ${{ github.event_name }}
          env: "NODE_ENV=development"

      #- name: Setup tmate session
      #  if: always()
      #  uses: mxschmitt/action-tmate@v3

      # Incase of second attemtp only run failed specs
      - name: Run the cypress test with failed tests
        if: steps.run_result.outputs.run_result == 'failedtest'
        uses: cypress-io/github-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_USERNAME: ${{ secrets.CYPRESS_USERNAME }}
          CYPRESS_PASSWORD: ${{ secrets.CYPRESS_PASSWORD }}
          CYPRESS_TESTUSERNAME1: ${{ secrets.CYPRESS_TESTUSERNAME1 }}
          CYPRESS_TESTPASSWORD1: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
          CYPRESS_TESTUSERNAME2: ${{ secrets.CYPRESS_TESTUSERNAME2 }}
          CYPRESS_TESTPASSWORD2: ${{ secrets.CYPRESS_TESTPASSWORD1 }}
          CYPRESS_TESTUSERNAME3: ${{ secrets.CYPRESS_TESTUSERNAME3 }}
          CYPRESS_TESTPASSWORD3: ${{ secrets.CYPRESS_TESTPASSWORD3 }}
          CYPRESS_TESTUSERNAME4: ${{ secrets.CYPRESS_TESTUSERNAME4 }}
          CYPRESS_TESTPASSWORD4: ${{ secrets.CYPRESS_TESTPASSWORD4 }}
          CYPRESS_S3_ACCESS_KEY: ${{ secrets.CYPRESS_S3_ACCESS_KEY }}
          CYPRESS_S3_SECRET_KEY: ${{ secrets.CYPRESS_S3_SECRET_KEY }}
          CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.CYPRESS_GITHUB_PERSONAL_ACCESS_TOKEN }}
          CYPRESS_GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
          CYPRESS_AIRTABLE_BEARER: ${{ secrets.AIRTABLE_BEARER }}
          CYPRESS_FIRESTORE_PRIVATE_KEY: ${{ secrets.FIRESTORE_PRIVATE_KEY }}
          CYPRESS_TEST_GITHUB_USER_NAME: ${{ secrets.CYPRESS_TEST_GITHUB_USER_NAME }}
          CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_ID }}
          CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GOOGLE_CLIENT_SECRET }}
          CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_ID }}
          CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET: ${{ secrets.CYPRESS_APPSMITH_OAUTH2_GITHUB_CLIENT_SECRET }}
          APPSMITH_DISABLE_TELEMETRY: true
          APPSMITH_GOOGLE_MAPS_API_KEY: ${{ secrets.APPSMITH_GOOGLE_MAPS_API_KEY }}
          COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title }}
        with:
          browser: ${{ env.BROWSER_PATH }}
          headless: true
          record: true
          install: false
          parallel: true
          config-file: cypress_ci.json
          group: "Electrons on Github Action"
          spec: "cypress/integration/**/**/*"
          working-directory: app/client
          # tag will be either "push" or "pull_request"
          tag: ${{ github.event_name }}
          env: "NODE_ENV=development"

      # - name: Setup tmate session
      #   if: always()
      #   uses: mxschmitt/action-tmate@v3

      - name: Collect CI container logs
        if: always()
        working-directory: "."
        run: |
          docker logs appsmith 2>&1 > ~/dockerlogs.txt

      # Upload docker logs
      - name: Upload failed test list artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dockerlogs-${{ matrix.job }}
          path: ~/dockerlogs.txt

      # Set status = failedtest
      - name: Set fail if there are test failures
        if: failure()
        run: echo "::set-output name=run_result::failedtest" > ~/run_result

      # Create a directory ~/failed_spec_ci and add a dummy file
      # This will ensure upload and download steps are successfull
      - name: Create directories for failed tests
        if: always()
        run: |
          mkdir -p  ~/failed_spec_ci
          echo  "empty" >> ~/failed_spec_ci/dummy-${{ matrix.job }}

      # add list failed tests to a file
      - name: Incase of test failures copy them to a file
        if: failure()
        run: |
          cd ${{ github.workspace }}/app/client/cypress/
          find screenshots -type d|grep -i spec |sed 's/screenshots/cypress\/integration/g' > ~/failed_spec_ci/failed_spec_ci-${{ matrix.job }}

      # Upload failed test list using common path for all matrix job
      - name: Upload failed test list artifact
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: failed-spec-ci
          path: ~/failed_spec_ci

      # Force store previous run result to cache
      - name: Store the previous run result
        if: failure()
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/run_result
          key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}

      # Force store previous failed test list to cache
      - name: Store the previous failed test result
        if: failure()
        uses: martijnhols/actions-cache/save@v3
        with:
          path: |
            ~/failed_spec_ci
          key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}

      # Upload the screenshots as artifacts if there's a failure
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots-${{ matrix.job }}
          path: app/client/cypress/screenshots/

      - name: Restore the previous bundle
        uses: actions/cache@v3
        with:
          path: |
            app/client/cypress/snapshots/
          key: ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}
          restore-keys: |
            ${{ github.run_id }}-${{ github.job }}-${{ matrix.job }}

      # Upload the snapshots as artifacts for layout validation
      - uses: actions/upload-artifact@v3
        with:
          name: cypress-snapshots-visualRegression
          path: app/client/cypress/snapshots/

      # Upload the log artifact so that it can be used by the test & deploy job in the workflow
      - name: Upload server logs bundle on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: server-logs-${{ matrix.job }}
          path: app/server/server-logs.log

      # Set status = success
      - run: echo "::set-output name=run_result::success" > ~/run_result
