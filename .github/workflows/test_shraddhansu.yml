name: Test_shraddhansu
on:
  # This line enables manual triggering of this workflow.
  workflow_dispatch:

  pull_request_review:
    types: [submitted]
    branches: [release, master]
    paths:
      - "app/client/**"
      - "!app/client/cypress/manual_TestSuite/**"

  # trigger for pushes to release and master
  push:
    branches: [release, master]
    paths:
      - "app/client/**"
      - "!app/client/cypress/manual_TestSuite/**"

# Change the working directory for all the jobs in this workflow
defaults:
  run:
    working-directory: app/client

jobs:
  build:
    # If the build has been triggered manually via workflow_dispatch or via a push to protected branches
    # then we don't check for the PR approved state
    # Only PR approvals of internally created PRs should trigger this workflow
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'push' || 
      (github.event_name == 'pull_request_review' && 
      github.event.review.state == 'approved' && 
      github.event.pull_request.head.repo.full_name == github.repository)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/client
        shell: bash

    steps:
      # Checkout the code
      - name: Checkout the merged commit from PR and base branch
        if: github.event_name == 'pull_request_review'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: refs/pull/${{ github.event.pull_request.number }}/merge

      - name: Checkout the head commit of the branch
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Figure out the PR number
        run: echo ${{ github.event.pull_request.number }}
      - name: yo yo yo 
        run: ${{github.id}}
      - name: yo yo yo yo
        run: | 
          pull_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
          echo $pull_number
          
      - name: lo lo lo
        run: |
          numnum = ${{github.event.number}}
          echo $numnum
          
      - name: Use Node.js 14.15.4
        uses: actions/setup-node@v1
        with:
          node-version: "14.15.4"

      - name: Get yarn cache directory path
        id: yarn-dep-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      # Retrieve npm dependencies from cache. After a successful run, these dependencies are cached again
      - name: Cache npm dependencies
        id: yarn-dep-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-yarn-dependencies
        with:
          path: |
            ${{ steps.yarn-dep-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-dep-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-dep-
      # Install all the dependencies
      - name: Install dependencies
        run: yarn install

      - name: Set the build environment based on the branch
        id: vars
        run: |
          echo "::set-output name=REACT_APP_ENVIRONMENT::DEVELOPMENT"
          if [[ "${{github.ref}}" == "refs/heads/master" ]]; then
              echo "::set-output name=REACT_APP_ENVIRONMENT::PRODUCTION"
          fi
          if [[ "${{github.ref}}" == "refs/heads/release" ]]; then
              echo "::set-output name=REACT_APP_ENVIRONMENT::STAGING"
          fi
          # Since this is an unreleased build, we set the version to incremented version number with
          # a `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo ::set-output name=version::$next_version-SNAPSHOT
      - name: Run the jest tests
        run: REACT_APP_ENVIRONMENT=${{steps.vars.outputs.REACT_APP_ENVIRONMENT}} yarn run test:unit

      # We burn React environment & the Segment analytics key into the build itself.
      # This is to ensure that we don't need to configure it in each installation
      - name: Create the bundle
        run: |
          REACT_APP_ENVIRONMENT=${{steps.vars.outputs.REACT_APP_ENVIRONMENT}} \
            REACT_APP_FUSIONCHARTS_LICENSE_KEY=${{ secrets.APPSMITH_FUSIONCHARTS_LICENSE_KEY }} \
            REACT_APP_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }} \
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }} \
            REACT_APP_VERSION_ID=${{ steps.vars.outputs.version }} \
            REACT_APP_VERSION_RELEASE_DATE=$(date -u '+%Y-%m-%dT%H:%M:%SZ') \
            REACT_APP_GOOGLE_ANALYTICS_ID=${{ secrets.GOOGLE_TAG_MANAGER_ID }} \
            yarn build
      # Upload the build artifact so that it can be used by the test & deploy job in the workflow
      - name: Upload react build bundle
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: app/client/build/
          
  ui-test:
   needs: build
   # Only run if the build step is successful
   if: success()
   runs-on: ubuntu-latest
   defaults:
     run:
       working-directory: app/client
       shell: bash
   strategy:
     fail-fast: false
     matrix:
       job: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
   # Service containers to run with this job. Required for running tests
   services: 
   #Label used to access the service container
    redis:
       # Docker Hub image for Redis
      image: redis
      ports:
          #Opens tcp port 6379 on the host and service container
         - 6379:6379
    mongo:
       image: mongo
       ports:
         - 27017:27017
      
   steps:
      #Checkout the code
     - name: Checkout the merged commit from PR and base branch
       if: github.event_name == 'pull_request_review'
       uses: actions/checkout@v2
       with:
         ref: refs/pull/${{ github.event.pull_request.number }}/merge

     - name: Checkout the head commit of the branch
       if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
       uses: actions/checkout@v2

     - name: Use Node.js 14.15.4
       uses: actions/setup-node@v1
       with:
         node-version: "14.15.4"

     - name: Get yarn cache directory path
       id: yarn-dep-cache-dir-path
       run: echo "::set-output name=dir::$(yarn cache dir)"

     # Retrieve npm dependencies from cache. After a successful run, these dependencies are cached again
     - name: Cache npm dependencies
       id: yarn-dep-cache
       uses: actions/cache@v2
       env:
         cache-name: cache-yarn-dependencies
       with:
         path: |
           ${{ steps.yarn-dep-cache-dir-path.outputs.dir }}
         key: ${{ runner.os }}-yarn-dep-${{ hashFiles('**/yarn.lock') }}
         restore-keys: |
           ${{ runner.os }}-yarn-dep-
      #Install all the dependencies
     - name: Install dependencies
       run: yarn install
       
  package:   
    needs: ui-test
   # Only run if the build step is successful
    runs-on: ubuntu-latest
    defaults:
     run:
       working-directory: app/client
       shell: bash
    steps:
     - name: Download the react build artifact
       uses: actions/download-artifact@v2
       with:
         name: build
         path: app/client/build

     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
     - name: see the directory
       run: pwd
     - name: see how many file is there.
       run: ls -ltr
     - name: upload the file to s3 bucket.
       run: |
          zip -r build.zip build
          aws s3 cp build.zip s3://taj2/build/
