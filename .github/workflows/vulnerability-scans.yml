name: Vulnerability Scans

on:
  workflow_dispatch:
  #schedule:
  #  - cron: '9 1 * * *'

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.DOCKER_HUB_ORGANIZATION }}/appsmith-${{ vars.EDITION }}:release'
          severity: CRITICAL,HIGH
          scanners: vuln
          timeout: 5m
          format: json
          output: image.json

      - name: Image scan output
        run: cat image.json

      - name: Trivy repo scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          ignore-unfixed: true
          severity: CRITICAL,HIGH
          timeout: 20m
          format: json
          output: repo.json

      - name: Repo scan output
        run: cat repo.json

      - name: Report
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs/promises")
            const results = [
              ...JSON.parse(await fs.readFile("image.json")).Results,
              ...JSON.parse(await fs.readFile("repo.json")).Results,
            ]

            const headers = [
              "CVE",
              "Severity",
              "Path",
              "Update to fix",
            ].map(data => ({ data, header: true }))

            const rows = [headers]
            const counts = {}

            for (const result of results) {
              if (result.Vulnerabilities == null) {
                continue
              }
              for (const vuln of result.Vulnerabilities) {
                rows.push([
                  vuln.VulnerabilityID,
                  vuln.Severity,
                  vuln.PkgPath || vuln.PkgName,
                  vuln.InstalledVersion + " &rarr; " + (vuln.FixedVersion || "N/A"),
                ])
                counts[vuln.Severity] = (counts[vuln.Severity] || 0) + 1
              }
            }

            await core.summary
              .addHeading("Scan Results")
              .addTable(["CRITICAL", "HIGH", "MEDIUM", "LOW", "UNKNOWN"].map(c => [
                c,
                "" + (counts[c] || "-"),
              ]))
              .addTable(rows)
              .write()
