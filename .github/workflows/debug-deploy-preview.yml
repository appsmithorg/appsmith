name: Debug on demand build Docker image and deploy preview

on:
  # This workflow is only triggered by the `/debug-build-deploy-preview` command dispatch
  repository_dispatch:
    types: [debug-build-deploy-preview-command]
  workflow_dispatch:
    inputs:
      skip-tests:
        description: Skip Tests
        type: boolean
        required: false
        default: true
      branch:
        description: Branch
        required: false
        default: release

jobs:

  server-build:
    name: server-build
    if: github.event.client_payload.slash_command.args.named.env != 'release'
    uses: ./.github/workflows/server-build.yml
    secrets: inherit
    with:
      pr: 0
      skip-tests: ${{ github.event.inputs.skip-tests }}
      branch: ${{ github.event.inputs.branch }}

  client-build:
    name: client-build
    if: github.event.client_payload.slash_command.args.named.env != 'release'
    uses: ./.github/workflows/client-build.yml
    secrets: inherit
    with:
      pr: 0
      skip-tests: ${{ github.event.inputs.skip-tests }}
      branch: ${{ github.event.inputs.branch }}
      airgap-enabled: ${{ github.event.client_payload.slash_command.args.named.airgap-enabled }}

  rts-build:
    name: rts-build
    if: github.event.client_payload.slash_command.args.named.env != 'release'
    uses: ./.github/workflows/rts-build.yml
    secrets: inherit
    with:
      pr: 0
      branch: ${{ github.event.inputs.branch }}

  setup-optionals:
    name: setup-optionals
    runs-on: ubuntu-latest
    outputs:
      airgap_enabled: ${{ steps.check.outputs.airgap_enabled }}
      client_build_name: ${{ steps.check.outputs.client_build_name }}
      client_build_path: ${{ steps.check.outputs.client_build_path }}
      platforms: ${{ steps.check.outputs.platforms }}
      skip-tests: ${{ github.event.inputs.skip-tests }}
      branch: ${{ github.event.inputs.branch }}
    steps:
      - name: Check all input conditions
        id: check
        run: |
          if [[ '${{ github.event.client_payload.slash_command.args.named.airgap-enabled }}' == 'true' ]]; then
           echo 'airgap_enabled=true' >> "$GITHUB_OUTPUT"
           echo 'client_build_name=client-build-airgap' >> "$GITHUB_OUTPUT"
           echo 'client_build_path=app/client/build_airgap/' >> "$GITHUB_OUTPUT"
           echo 'platforms=linux/amd64,linux/arm64' >> "$GITHUB_OUTPUT"
          else
           echo 'airgap_enabled=false' >> "$GITHUB_OUTPUT"
           echo 'client_build_name=client-build' >> "$GITHUB_OUTPUT"
           echo 'client_build_path=app/client/build/' >> "$GITHUB_OUTPUT"
           echo 'platforms=linux/amd64' >> "$GITHUB_OUTPUT"
          fi


  push-image:
    needs: [client-build, rts-build, server-build, setup-optionals]
    runs-on: ubuntu-latest
    if: success()
    steps:

      # Check out branch
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      # Timestamp will be used to create cache key
      - id: timestamp
        run: echo "timestamp=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT

      # get Git-hash will be used to create cache key
      - id: git_hash
        run: echo "git_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Log the client build env vars
        run: |
          echo "client_build_name: ${{ needs.setup-optionals.outputs.client_build_name }}"
          echo "client_build_path: ${{ needs.setup-optionals.outputs.client_build_path }}"

      - name: Download the client build artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup-optionals.outputs.client_build_name }}
          path: app/client

      - name: Unpack the client build artifact
        if: steps.run_result.outputs.run_result != 'success'
        run: |
          mkdir -p ${{ needs.setup-optionals.outputs.client_build_path }}
          tar -xvf app/client/build.tar -C ${{ needs.setup-optionals.outputs.client_build_path }}

      - name: Download the server build artifact
        uses: actions/download-artifact@v3
        with:
          name: server-build
          path: app/server/dist

      - name: Download the rts build artifact
        uses: actions/download-artifact@v3
        with:
          name: rts-dist
          path: app/client/packages/rts/dist

      - name: Untar the rts folder
        run: |
          tar -xvf app/client/packages/rts/dist/rts-dist.tar -C app/client/packages/rts/
          echo "Cleaning up the tar files"
          rm app/client/packages/rts/dist/rts-dist.tar

      - name: Generate info.json
        run: |
          if [[ -f scripts/generate_info_json.sh ]]; then
            scripts/generate_info_json.sh
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          pull: true
          push: true
          platforms: ${{ needs.setup-optionals.outputs.platforms }}
          cache-from: ${{ vars.DOCKER_HUB_ORGANIZATION }}/appsmith-${{ vars.EDITION }}:latest
          tags: |
            ${{ vars.DOCKER_HUB_ORGANIZATION }}/appsmith-dp:${{ vars.EDITION }}-${{ github.event.client_payload.pull_request.number }}
          build-args: |
            APPSMITH_AIRGAP_ENABLED=${{needs.setup-optionals.outputs.airgap_enabled}}
            APPSMITH_CLIENT_BUILD_PATH=${{needs.setup-optionals.outputs.client_build_path}}
            APPSMITH_SEGMENT_CE_KEY=${{ secrets.APPSMITH_SEGMENT_CE_KEY }}

    outputs:
      imageHash: ${{ vars.EDITION }}-${{ github.event.client_payload.pull_request.number }}