# This workflow is responsible for building, testing & packaging the Java server codebase
name: Build RTS Workflow

on:
  # This line enables manual triggering of this workflow.
  workflow_dispatch:

  push:
    branches: [release, master]
    # Only trigger if files have changed in this specific path
    paths:
      - "app/rts/**"

  pull_request:
    branches: [release, master]
    paths:
      - "app/rts/**"

# Change the working directory for all the jobs in this workflow
defaults:
  run:
    working-directory: app/rts

jobs:
  build:
    runs-on: ubuntu-latest
    # Only run this workflow for internally triggered events
    if: |
      github.event.pull_request.head.repo.full_name == github.repository ||
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch'

    steps:
      # Checkout the code
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js 14.15.4
        uses: actions/setup-node@v1
        with:
          node-version: "14.15.4"

      # Here, the GITHUB_REF is of type /refs/head/<branch_name>. We extract branch_name from this by removing the
      # first 11 characters. This can be used to build images for several branches
      # Since this is an unreleased build, we get the latest released version number, increment the minor number in it,
      # append a `-SNAPSHOT` at it's end to prepare the snapshot version number. This is used as the project's version.
      - name: Get the version to tag the Docker image
        id: vars
        run: |
          # Since this is an unreleased build, we set the version to incremented version number with a
          # `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo ::set-output name=version::$next_version-SNAPSHOT
          echo ::set-output name=tag::$(echo ${GITHUB_REF:11})

      - name: Build
        run: ./build.sh

      # Build release Docker image and push to Docker Hub
      - name: Push release image to Docker Hub
        if: success() && github.ref == 'refs/heads/release'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-rts:${{steps.vars.outputs.tag}} .
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-rts:${{steps.vars.outputs.tag}}

      # Build master Docker image and push to Docker Hub
      - name: Push master image to Docker Hub with commit tag
        if: success() && github.ref == 'refs/heads/master'
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-rts:${GITHUB_SHA} .
          docker build -t ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-rts:nightly .
          echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-rts:${GITHUB_SHA}
          docker push ${{ secrets.DOCKER_HUB_ORGANIZATION }}/appsmith-rts:nightly

  # These are dummy jobs in the CI build to satisfy required status checks for merging PRs. This is a hack because Github doesn't support conditional
  # required checks in monorepos. These jobs are a clone of similarly named jobs in client.yml.
  #
  # Check support request at: https://github.community/t/feature-request-conditional-required-checks/16761
  ui-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        job: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    steps:
      # Checkout the code
      - uses: actions/checkout@v2

      - name: Do nothing as this is a dummy step
        shell: bash
        run: |
          exit 0

  package:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - uses: actions/checkout@v2

      - name: Do nothing as this is a dummy step
        shell: bash
        run: |
          exit 0
