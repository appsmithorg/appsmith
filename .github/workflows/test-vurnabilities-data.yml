name: Run Vulnerability Data Script with Parameters and Update PR

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: 'Docker image name to scan'
        required: true
        default: 'appsmith/appsmith-ce:release'
      old_vuln_file:
        description: 'Old vulnerability file (if exists)'
        required: true
        default: 'vulnerabilities.txt'

jobs:
  run-and-update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}    

      # Run Scout vulnerability data script
      # - name: Run Scout vulnerability data script
      #   if: always()
      #   run: |
      #     chmod +x scripts/scout_vulnerabilities_data.sh
      #     ./scripts/scout_vulnerabilities_data.sh "${{ inputs.image_name }}" "${{ inputs.old_vuln_file }}"
  
      # - name: Upload Vulnerabilities Scan Results
      #   uses: actions/upload-artifact@v3
      #   with:
      #       name: vulnerabilities-scan-results
      #       path: scout_vulnerabilities_new.txt

      # # Run Trivy vulnerability data script
      # - name: Run Trivy vulnerability data script
      #   if: always()
      #   run: |
      #     chmod +x scripts/trivy_vulnerabilities_data.sh
      #     ./scripts/trivy_vulnerabilities_data.sh "${{ inputs.image_name }}" "${{ inputs.old_vuln_file }}"

      # # Upload Trivy vulnerabilities report as artifact
      # - name: Upload Trivy vulnerabilities report as artifact
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: trivy-vulnerabilities-report
      #     path: trivy_vulnerabilities_diff.txt

      # Mark Cypress response as stale and save vulnerability data
      - name: Mark the Cypress response to be stale and save vulnerability data
        uses: actions/github-script@v7
        env:
          NODE_PATH: "${{ github.workspace }}/.github/workflows/scripts"
          DATABASE_URL: ${{ secrets.DATABASE_URL }}  # Ensure this secret is in your GitHub repo settings
          BODY: |
            Tests have not run on the HEAD ${{ github.event.pull_request.head.sha }} yet
        with:
          script: |
            require("check-vulnerability.js")({core, context, github}, "warning", process.env.BODY)

      # Print vulnerability data file
      - name: Print vulnerability data file
        run: cat ./vulnerability_data.json

      # # Create a PR comment with vulnerabilities report
      # - name: Create PR comment with vulnerabilities report
      #   if: always()
      #   uses: actions/github-script@v7
      #   env:
      #     NODE_PATH: "${{ github.workspace }}/.github/workflows/scripts"
      #   with:
      #     script: |
      #       const fs = require('fs');
      #       const { context, github } = require('@actions/github');

      #       let scoutReportPath = './scout_vulnerabilities_diff.txt';
      #       let trivyReportPath = './trivy_vulnerabilities_diff.txt';
      #       let body = `Vulnerability scan found issues.\nWorkflow run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}>\nCommit: ${{ github.sha }}\n\n`;

      #       // Read Scout report
      #       body += fs.existsSync(scoutReportPath) 
      #         ? fs.readFileSync(scoutReportPath, 'utf8') 
      #         : "No Scout vulnerabilities found.\n";

      #       // Read Trivy report
      #       body += fs.existsSync(trivyReportPath) 
      #         ? fs.readFileSync(trivyReportPath, 'utf8') 
      #         : "No Trivy vulnerabilities found.\n";

      #       // Post comment on the PR
      #       await github.rest.issues.createComment({
      #         issue_number: context.payload.pull_request.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body
      #       });

      #       // Set failure status if vulnerabilities are found
      #       core.setFailed("Vulnerability scan detected issues.");