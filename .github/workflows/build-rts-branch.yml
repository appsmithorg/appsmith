name: Build RTS branch

on:
  # This workflow is only triggered by the `/build-deploy-preview` command dispatch
  workflow_dispatch:
    inputs:
      branch:
        description: "Github Branch to be deployed"
        required: true
        default: "release"
      skip-tests:
        description: "Flag to skip tests durin build"
        required: true
        default: "true"
      uid:
        description: "Unique ID to store the run data in the db"
        required: true
      sub-domain-name:
        description: "Sub-domain for dp.appsmith.com to by used by this deploy preview (This will also be the image name and the k8s namespace identifier)"
        required: true

jobs:
  rts-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app/client/packages/rts
        shell: bash

    steps:
      - uses: mxschmitt/action-tmate@v3

      - name: Checkout the build branch
        uses: actions/checkout@v3
        with:
          ref:  ${{ github.event.inputs.branch }}

      - name: Set up Depot CLI
        uses: depot/setup-action@v1

      # In case this is second attempt try restoring status of the prior attempt from cache
      - name: Restore the previous run result
        uses: actions/cache@v3
        with:
          path: |
            ~/run_result
          key: ${{ github.run_id }}-${{ github.job }}-rts

      # Fetch prior run result
      - name: Get the previous run result
        id: run_result
        run: cat ~/run_result 2>/dev/null || echo 'default'

      # In case of prior failure run the job
      - if: steps.run_result.outputs.run_result != 'success'
        run: echo "I'm alive!" && exit 0

      - name: Use Node.js 16.14.0
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/setup-node@v3
        with:
          node-version: "16.14.0"

      # actions/setup-node@v3 doesnâ€™t work properly with Yarn 3
      # when the project lives in a subdirectory: https://github.com/actions/setup-node/issues/488
      # Restoring the cache manually instead
      - name: Restore Yarn cache
        if: steps.run_result.outputs.run_result != 'success'
        uses: actions/cache@v3
        with:
          path: app/client/.yarn/cache
          key: v1-yarn3-${{ hashFiles('app/client/yarn.lock') }}
          restore-keys: |
            v1-yarn3-

      # Here, the GITHUB_REF is of type /refs/head/<branch_name>. We extract branch_name from this by removing the
      # first 11 characters. This can be used to build images for several branches
      # Since this is an unreleased build, we get the latest released version number, increment the minor number in it,
      # append a `-SNAPSHOT` at it's end to prepare the snapshot version number. This is used as the project's version.
      - name: Get the version to tag the Docker image
        if: steps.run_result.outputs.run_result != 'success'
        id: vars
        run: |
          # Since this is an unreleased build, we set the version to incremented version number with a
          # `-SNAPSHOT` suffix.
          latest_released_version="$(git tag --list 'v*' --sort=-version:refname | head -1)"
          echo "latest_released_version = $latest_released_version"
          next_version="$(echo "$latest_released_version" | awk -F. -v OFS=. '{ $NF++; print }')"
          echo "next_version = $next_version"
          echo version=$next_version-SNAPSHOT >> $GITHUB_OUTPUT
          echo tag=$(echo ${GITHUB_REF:11}) >> $GITHUB_OUTPUT

      # Install all the dependencies
      - name: Install dependencies
        if: steps.run_result.outputs.run_result != 'success'
        run: yarn install --immutable
        working-directory: app/client/packages/rts

      # Run the Jest tests only if the workflow has been invoked in a PR
      - name: Run the jest tests
        if: steps.run_result.outputs.run_result != 'success'
        run: yarn run test:unit
        working-directory: app/client/packages/rts

      - name: Build
        if: steps.run_result.outputs.run_result != 'success'
        run: |
          echo 'export const VERSION = "${{ steps.vars.outputs.version }}"' > src/version.js
          yarn build

      # Set status = failure
      - name: Set result as failed if there are build failures
        if: failure()
        run: |
          echo "run_result=failed" >> $GITHUB_OUTPUT > ~/run_result
          exit 1;
        working-directory: app/client/packages/rts

      # Restore the previous built bundle if present. If not push the newly built into the cache
      - name: Restore the previous bundle
        uses: actions/cache@v3
        with:
          path: |
            app/client/packages/rts/dist/
          key: ${{ github.run_id }}-${{ github.job }}-rts

      # Tar the bundles to speed up the upload & download process
      - name: Tar the rts bundles
        run: |
          tar -cvf rts-dist.tar dist
        working-directory: app/client/packages/rts

      # Upload the build artifacts and dependencies so that it can be used by the test & deploy job in other workflows
      - name: Upload rts build bundle
        uses: actions/upload-artifact@v3
        with:
          name: rts-dist
          path: app/client/packages/rts/rts-dist.tar

      # Set status = success
      - name: Save the status of the run
        run: echo "run_result=success" >> $GITHUB_OUTPUT > ~/run_result
