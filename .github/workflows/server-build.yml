# This workflow is responsible for building, testing & packaging the Java server codebase
name: Appsmith Server Workflow

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      pr:
        description: "This is the PR number in case the workflow is being called in a pull request"
        required: false
        type: number
      skip-tests:
        description: "This is a boolean value in case the workflow is being called in build deploy-preview"
        required: false
        type: string
        default: "false"
      branch:
        description: "This is the branch to be used for the build."
        required: false
        type: string

# Change the working directory for all the jobs in this workflow
defaults:
  run:
    working-directory: app/server

jobs:
  server-unit-tests:
    runs-on: ubuntu-latest

    # Service containers to run with this job. Required for running tests
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image for Redis
        image: redis
        ports:
          # Opens tcp port 6379 on the host and service container
          - 6379:6379

    steps:
      # The checkout steps MUST happen first because the default directory is set according to the code base.
      # GitHub Action expects all future commands to be executed in the code directory. Hence, we need to check out
      # the code before doing anything else.

      # Check out merge commit with the base branch in case this workflow is invoked via pull request

      
      
      - name: Check out merged commit from PR and base branch
        uses: actions/checkout@v3
        if: inputs.pr != 0
        with:
          fetch-depth: 0
          ref: refs/pull/${{ inputs.pr }}/merge

      # Check out the specified branch in case this workflow is called by another workflow
      - name: Checkout the specified branch
        if: inputs.pr == 0 && inputs.branch != ''
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.branch }}
  
      # Checkout the code in the current branch in case the workflow is called because of a branch push event
      - name: Check out the head commit of the branch
        uses: actions/checkout@v3
        if: inputs.pr == 0 && inputs.branch == ''
        with:
          fetch-depth: 0


      - name: Figure out the PR number
        run: echo ${{ inputs.pr }}

      - name: Print the Github event
        run: echo ${{ github.event_name }}


      - name: Get changed files in the server folder
        id: changed-files-specific
        uses: tj-actions/changed-files@v41
        with:
          files: 'app/server/**'


      - name: Run step if any file(s) in the server folder change
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files-specific.outputs.all_changed_files }}
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: $ALL_CHANGED_FILES"




      - name: Get changed files in the client folder
        id: changed-files-specific2
        uses: tj-actions/changed-files@v41
        with:
          files: 'app/client/**'


      - name: Run step if any file(s) in the client folder change
        if: steps.changed-files-specific2.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files-specific2.outputs.all_changed_files }}
        run: |
          echo "One or more files in the docs folder has changed."
          echo "List all the files that have changed: $ALL_CHANGED_FILES"


      - name: Fetch release from cache
        if: steps.changed-files-specific2.outputs.any_changed == 'false' && success() 
        env:
          cachetoken: ${{ secrets.CACHETOKEN }}
          reponame: ${{ github.event.repository.name }}
          gituser: ${{ secrets.CACHE_GIT_USER }}
          gituseremail: ${{ secrets.CACHE_GIT_EMAIL }}
        run: |
          mkdir cacherepo
          cd ./cacherepo
          git lfs install
          git config --global user.email "$gituseremail"
          git config --global user.name "$gituser"
          git clone https://$cachetoken@github.com/appsmithorg/cibuildcache.git
          git lfs install
          if [ "$reponame" = "appsmith" ]; then export repodir="CE"; fi
          if [ "$reponame" = "appsmith-ee" ]; then export repodir="EE"; fi
          cd cibuildcache/$repodir/release/server
          git lfs pull ./server.jar          
          mv ./server.jar ../../../../../server.jar
          cd ../../../../../
          tar -xzvf ./server.jar


      - name: Setup upterm session
        if: always()
        uses: lhotari/action-upterm@v1


      - name: Upload server build bundle
        if: steps.changed-files-specific2.outputs.any_changed == 'false'
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: app/server/dist/
          



 

